{
    "model": "gpt-3.5-turbo",
    "messages": [
      {
        "role": "system",
        "content": "### Settings ###\nI would like you to provide me with source code in a suitable programming language. The programming language and the algorithm of the source code will be provided by the user\n\n### Requirements ###\n- Please provide only the source code.\n- Do not include any comment in the source code.\n- Please return the source code in a formatted state."
      },
      {
        "role": "user",
        "content": "language: python, algorithm: dfs"
      },
      {
        "role": "assistant",
        "content": "response: <code>class Graph:\n    def __init__(self):\n        self.graph = {}\n\n    def add_edge(self, u, v):\n        if u not in self.graph:\n            self.graph[u] = []\n        self.graph[u].append(v)\n\n    def dfs(self, start):\n        visited = set()\n        self._dfs_helper(start, visited)\n\n    def _dfs_helper(self, vertex, visited):\n        visited.add(vertex)\n        print(vertex, end=\" \")\n\n        if vertex in self.graph:\n            for neighbor in self.graph[vertex]:\n                if neighbor not in visited:\n                    self._dfs_helper(neighbor, visited)\n\n\n# Example usage\ng = Graph()\n\ng.add_edge('A', 'B')\ng.add_edge('A', 'C')\ng.add_edge('B', 'D')\ng.add_edge('C', 'E')\ng.add_edge('D', 'F')\ng.add_edge('E', 'F')\n\nprint(\"Depth First Traversal (starting from 'A'):\")\ng.dfs('A')\n</code>"
      },
      {
        "role": "user",
        "content": "language: c++, algorithm: bfs"
      },
      {
        "role": "assistant",
        "content": "response: <code>#include <iostream>\n#include <queue>\n#include <unordered_map>\n#include <vector>\n\nusing namespace std;\n\nclass Graph {\npublic:\n    void addEdge(int u, int v) {\n        adj[u].push_back(v);\n    }\n\n    void bfs(int start) {\n        unordered_map<int, bool> visited;\n        queue<int> q;\n        visited[start] = true;\n        q.push(start);\n\n        while (!q.empty()) {\n            int current = q.front();\n            q.pop();\n\n            cout << current << \" \";\n\n            for (int neighbor : adj[current]) {\n                if (!visited[neighbor]) {\n                    visited[neighbor] = true;\n                    q.push(neighbor);\n                }\n            }\n        }\n    }\n\nprivate:\n    unordered_map<int, vector<int>> adj;\n};\n\nint main() {\n    Graph g;\n\n    g.addEdge(0, 1);\n    g.addEdge(0, 2);\n    g.addEdge(1, 2);\n    g.addEdge(2, 0);\n    g.addEdge(2, 3);\n    g.addEdge(3, 3);\n\n    cout << \"Breadth First Traversal (starting from 2): \";\n    g.bfs(2);\n\n    return 0;\n}</code>"
      },
      {
        "role": "user",
        "content": "language: typescript, algorithm: bubble_sort"
      },
      {
        "role": "assistant",
        "content": "response: <code>function bubbleSort(arr: number[]): number[] {\n    const n = arr.length;\n    \n    for (let i = 0; i < n - 1; i++) {\n        for (let j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap arr[j] and arr[j+1]\n                const temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    \n    return arr;\n}\n\n// Example usage\nconst arr = [64, 34, 25, 12, 22, 11, 90];\nconsole.log(\"Original array: \" + arr);\nconsole.log(\"Sorted array: \" + bubbleSort(arr));\n</code>"
      },
      {
        "role": "user",
        "content": "language: go, algorithm: gcd"
      },
      {
        "role": "assistant",
        "content": "response: <code>package main\n\nimport \"fmt\"\n\nfunc gcd(a, b int) int {\n    if b == 0 {\n        return a\n    } else {\n        return gcd(b, a%b)\n    }\n}\n\nfunc main() {\n    fmt.Println(gcd(48, 18)) // Output: 6\n}\n</code>"
      },
      {
        "role": "user",
        "content": "language: python, algorithm: quick_sort"
      }
    ],
    "temperature": 1,
    "max_tokens": 350,
    "top_p": 1,
    "frequency_penalty": 0,
    "presence_penalty": 0
}