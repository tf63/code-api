nrow,tool_id,content
11,215,"import React from 'react';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Hello, Julia</h1>\n    </div>\n  );\n};\n\nexport default App;"
23,109,"import cv2\n\ndef process_image(image_path):\n    # Load the image\n    image = cv2.imread(image_path)\n\n    # Convert the image to grayscale\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n    # Apply a Gaussian blur to the image\n    blurred = cv2.GaussianBlur(gray, (5, 5), 0)\n\n    # Perform edge detection using the Canny algorithm\n    edges = cv2.Canny(blurred, 50, 150)\n\n    # Return the processed image\n    return edges\n\n# Example usage\nprocessed_image = process_image(\"image.jpg\")\ncv2.imshow(\"Processed Image\", processed_image)\ncv2.waitKey(0)\ncv2.destroyAllWindows()"
21,108,"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\n\n# Define the model\nmodel = Sequential()\nmodel.add(Dense(64, activation='relu', input_shape=(input_dim,)))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(output_dim, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, batch_size=32, epochs=10, validation_split=0.2)\n\n# Evaluate the model\nscore = model.evaluate(x_test, y_test, verbose=0)\n\n# Make predictions\npredictions = model.predict(x_test)"
18,500,"package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\": \"Hello, World!\",\n\t\t})\n\t})\n\n\tr.Run(\":8080\")\n}"
30,219,"&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;jQuery Example&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"content\"&gt;&lt;/div&gt;\n  \n  &lt;script&gt;\n    $(document).ready(function() {\n      var contentElement = $('#content');\n      \n      $.ajax({\n        url: 'https://api.example.com/data',\n        method: 'GET',\n        dataType: 'json',\n        success: function(data) {\n          contentElement.text('Received data: ' + JSON.stringify(data));\n        },\n        error: function() {\n          contentElement.text('Failed to fetch data.');\n        }\n      });\n    });\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;"
15,215,"// src/App.tsx\nimport React from 'react';\n\nconst App: React.FC = () => {\n  return <div>Hello World</div>;\n};\n\nexport default App;\n\n// src/index.tsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"
