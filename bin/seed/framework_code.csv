nrow,tool_id,content
11,215,"import React from 'react';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Hello, Julia</h1>\n    </div>\n  );\n};\n\nexport default App;"
23,109,"import cv2\n\ndef process_image(image_path):\n    # Load the image\n    image = cv2.imread(image_path)\n\n    # Convert the image to grayscale\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n    # Apply a Gaussian blur to the image\n    blurred = cv2.GaussianBlur(gray, (5, 5), 0)\n\n    # Perform edge detection using the Canny algorithm\n    edges = cv2.Canny(blurred, 50, 150)\n\n    # Return the processed image\n    return edges\n\n# Example usage\nprocessed_image = process_image(\"image.jpg\")\ncv2.imshow(\"Processed Image\", processed_image)\ncv2.waitKey(0)\ncv2.destroyAllWindows()"
21,108,"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\n\n# Define the model\nmodel = Sequential()\nmodel.add(Dense(64, activation='relu', input_shape=(input_dim,)))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(output_dim, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, batch_size=32, epochs=10, validation_split=0.2)\n\n# Evaluate the model\nscore = model.evaluate(x_test, y_test, verbose=0)\n\n# Make predictions\npredictions = model.predict(x_test)"
18,500,"package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\": \"Hello, World!\",\n\t\t})\n\t})\n\n\tr.Run(\":8080\")\n}"
30,219,"&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;jQuery Example&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"content\"&gt;&lt;/div&gt;\n  \n  &lt;script&gt;\n    $(document).ready(function() {\n      var contentElement = $('#content');\n      \n      $.ajax({\n        url: 'https://api.example.com/data',\n        method: 'GET',\n        dataType: 'json',\n        success: function(data) {\n          contentElement.text('Received data: ' + JSON.stringify(data));\n        },\n        error: function() {\n          contentElement.text('Failed to fetch data.');\n        }\n      });\n    });\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;"
15,215,"// src/App.tsx\nimport React from 'react';\n\nconst App: React.FC = () => {\n  return <div>Hello World</div>;\n};\n\nexport default App;\n\n// src/index.tsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"
24,110,"from sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the Iris dataset\niris = load_iris()\n\n# Split the dataset into features and target\nX = iris.data\ny = iris.target\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize and train the logistic regression model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions on the testing set\ny_pred = model.predict(X_test)\n\n# Print the accuracy of the model\naccuracy = model.score(X_test, y_test)\nprint(\"Accuracy:\", accuracy)"
24,102,"from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return jsonify({\"message\": \"Hello, World!\"})\n\n@app.route('/items', methods=['GET'])\ndef get_items():\n    items = [\n        {\"id\": 1, \"name\": \"Item 1\"},\n        {\"id\": 2, \"name\": \"Item 2\"},\n        {\"id\": 3, \"name\": \"Item 3\"}\n    ]\n    return jsonify(items)\n\n@app.route('/items', methods=['POST'])\ndef add_item():\n    item = request.get_json()\n    return jsonify(item), 201\n\nif __name__ == '__main__':\n    app.run()"
15,400,"# app/controllers/welcome_controller.rb\nclass WelcomeController < ApplicationController\n  def index\n    @message = \"Hello, World!\"\n  end\nend\n\n# app/views/welcome/index.html.erb\n<h1>Welcome#index</h1>\n<p><%= @message %></p>\n\n# config/routes.rb\nRails.application.routes.draw do\n  root 'welcome#index'\nend"
91,500,"package main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\ntype User struct {\n\tID   int    `json:\"id\"`\n\tName string `json:\"name\"`\n\tAge  int    `json:\"age\"`\n}\n\nvar users []User\n\nfunc main() {\n\trouter := gin.Default()\n\n\trouter.GET(\"/users\", getUsers)\n\trouter.GET(\"/users/:id\", getUser)\n\trouter.POST(\"/users\", createUser)\n\trouter.PUT(\"/users/:id\", updateUser)\n\trouter.DELETE(\"/users/:id\", deleteUser)\n\n\trouter.Run(\":8080\")\n}\n\nfunc getUsers(c *gin.Context) {\n\tc.JSON(http.StatusOK, users)\n}\n\nfunc getUser(c *gin.Context) {\n\tid := c.Param(\"id\")\n\n\tfor _, user := range users {\n\t\tif user.ID == id {\n\t\t\tc.JSON(http.StatusOK, user)\n\t\t\treturn\n\t\t}\n\t}\n\n\tc.JSON(http.StatusNotFound, gin.H{\"error\": \"User not found\"})\n}\n\nfunc createUser(c *gin.Context) {\n\tvar user User\n\n\tif err := c.ShouldBindJSON(&user); err != nil {\n\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Invalid request payload\"})\n\t\treturn\n\t}\n\n\tusers = append(users, user)\n\tc.JSON(http.StatusCreated, user)\n}\n\nfunc updateUser(c *gin.Context) {\n\tid := c.Param(\"id\")\n\n\tvar updatedUser User\n\n\tif err := c.ShouldBindJSON(&updatedUser); err != nil {\n\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"Invalid request payload\"})\n\t\treturn\n\t}\n\n\tfor i, user := range users {\n\t\tif user.ID == id {\n\t\t\tusers[i] = updatedUser\n\t\t\tc.JSON(http.StatusOK, updatedUser)\n\t\t\treturn\n\t\t}\n\t}\n\n\tc.JSON(http.StatusNotFound, gin.H{\"error\": \"User not found\"})\n}\n\nfunc deleteUser(c *gin.Context) {\n\tid := c.Param(\"id\")\n\n\tfor i, user := range users {\n\t\tif user.ID == id {\n\t\t\tusers = append(users[:i], users[i+1:]...)\n\t\t\tc.Status(http.StatusNoContent)\n\t\t\treturn\n\t\t}\n\t}\n\n\tc.JSON(http.StatusNotFound, gin.H{\"error\": \"User not found\"})\n}"
45,218,"// main.ts\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n\n// app.module.ts\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n// app.controller.ts\nimport { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n// app.service.ts\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}"
11,104,"import pandas as pd\n\ndata = {\n    'Name': ['John', 'Emma', 'Connor', 'Emily', 'Michael'],\n    'Age': [25, 28, 32, 27, 30],\n    'City': ['London', 'New York', 'Sydney', 'Paris', 'Tokyo']\n}\n\ndf = pd.DataFrame(data)\n\nprint(df.head())"
15,217,"// Import required modules\nimport express, { Request, Response } from 'express';\n\n// Create Express app instance\nconst app = express();\n\n// Define routes\napp.get('/', (req: Request, res: Response) => {\n  res.send('Hello World');\n});\n\n// Start server\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});"
17,302,"// src/Controller/DefaultController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass DefaultController extends AbstractController\n{\n    /**\n     * @Route(\"/\", name=\"homepage\")\n     */\n    public function index(): Response\n    {\n        return new Response('<html><body>Hello World!</body></html>');\n    }\n}"
14,400,"# app/controllers/welcome_controller.rb\nclass WelcomeController < ApplicationController\n  def index\n    @message = \"Hello, World!\"\n  end\nend\n\n# app/views/welcome/index.html.erb\n<h1><%= @message %></h1>\n\n# config/routes.rb\nRails.application.routes.draw do\n  root 'welcome#index'\nend"
32,218,"// main.ts\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n\n// app.module.ts\nimport { Module } from '@nestjs/common';\n\n@Module({\n  imports: [],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n// app.controller.ts\nimport { Controller, Get } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n  @Get()\n  getHello(): string {\n    return 'Hello World!';\n  }\n}"
71,300,"// src/Controller/ArticlesController.php\n\ndeclare(strict_types=1);\n\nnamespace App\\Controller;\n\nuse App\\Controller\\AppController;\n\nclass ArticlesController extends AppController\n{\n    public function index()\n    {\n        $articles = $this->Articles->find()->all();\n        $this->set(compact('articles'));\n    }\n\n    public function view($id = null)\n    {\n        $article = $this->Articles->get($id, [\n            'contain' => []\n        ]);\n\n        $this->set('article', $article);\n    }\n\n    public function add()\n    {\n        $article = $this->Articles->newEmptyEntity();\n        if ($this->request->is('post')) {\n            $article = $this->Articles->patchEntity($article, $this->request->getData());\n            if ($this->Articles->save($article)) {\n                $this->Flash->success(__('The article has been saved.'));\n\n                return $this->redirect(['action' => 'index']);\n            }\n            $this->Flash->error(__('The article could not be saved. Please, try again.'));\n        }\n        $this->set(compact('article'));\n    }\n\n    public function edit($id = null)\n    {\n        $article = $this->Articles->get($id, [\n            'contain' => []\n        ]);\n        if ($this->request->is(['patch', 'post', 'put'])) {\n            $article = $this->Articles->patchEntity($article, $this->request->getData());\n            if ($this->Articles->save($article)) {\n                $this->Flash->success(__('The article has been saved.'));\n\n                return $this->redirect(['action' => 'index']);\n            }\n            $this->Flash->error(__('The article could not be saved. Please, try again.'));\n        }\n        $this->set(compact('article'));\n    }\n\n    public function delete($id = null)\n    {\n        $this->request->allowMethod(['post', 'delete']);\n        $article = $this->Articles->get($id);\n        if ($this->Articles->delete($article)) {\n            $this->Flash->success(__('The article has been deleted.'));\n        } else {\n            $this->Flash->error(__('The article could not be deleted. Please, try again.'));\n        }\n\n        return $this->redirect(['action' => 'index']);\n    }\n}\n"
16,107,"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load example dataset\ntips = sns.load_dataset(\"tips\")\n\n# Create a scatter plot\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"time\")\n\n# Set plot title and axis labels\nplt.title(\"Tips by Total Bill\")\nplt.xlabel(\"Total Bill\")\nplt.ylabel(\"Tip\")\n\n# Show the plot\nplt.show()"
21,218,"// main.ts\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n\n// app.module.ts\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}"
37,106,"import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\n# Define your model architecture\nclass Model(nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.fc1 = nn.Linear(10, 5)\n        self.fc2 = nn.Linear(5, 2)\n\n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n\n# Create an instance of the model\nmodel = Model()\n\n# Define your loss function and optimizer\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.SGD(model.parameters(), lr=0.001)\n\n# Create your input data\ninputs = torch.randn(10, 10)\ntargets = torch.LongTensor([0, 1, 0, 1, 0, 1, 0, 1, 0, 1])\n\n# Train your model\nfor epoch in range(100):\n    optimizer.zero_grad()  # Zero the gradients\n    outputs = model(inputs)  # Forward pass\n    loss = criterion(outputs, targets)  # Calculate loss\n    loss.backward()  # Backward pass\n    optimizer.step()  # Update weights\n\n    if epoch % 10 == 0:\n        print(f'Epoch: {epoch}, Loss: {loss.item()}')"
18,500,"package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\n\t\t\t\"message\": \"Hello, World!\",\n\t\t})\n\t})\n\n\tr.Run(\":8080\")\n}"
24,101,"# myapp/views.py\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\n\ndef index(request):\n    return HttpResponse(\"Hello World\")\n\n# myapp/urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n\n# myproject/urls.py\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]\n"
45,218,"// main.ts\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n\n// app.module.ts\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n// app.controller.ts\nimport { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n// app.service.ts\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}"
22,216,"Response: \n```typescript\n<template>\n  <div>\n    <h1>{{ message }}</h1>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue } from 'vue-class-component';\n\nexport default class App extends Vue {\n  message: string = 'Hello World';\n}\n</script>\n\n<style>\nh1 {\n  color: blue;\n}\n</style>\n```"
14,107,"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load sample dataset\ndf = sns.load_dataset('iris')\n\n# Set style\nsns.set(style=\"ticks\")\n\n# Create scatter plot with seaborn\nsns.scatterplot(x='sepal_length', y='sepal_width', hue='species', data=df)\n\n# Show the plot\nplt.show()"
20,400,"# Gemfile\nsource 'https://rubygems.org'\ngem 'rails', '~> 6.1.4'\n\n# other gems...\n\n# config/routes.rb\nRails.application.routes.draw do\n  root 'welcome#index'\nend\n\n# app/controllers/welcome_controller.rb\nclass WelcomeController < ApplicationController\n  def index\n    @message = 'Hello World'\n  end\nend\n\n# app/views/welcome/index.html.erb\n<h1><%= @message %></h1>"
15,109,"import cv2\n\n# Load the image\nimage = cv2.imread('image.jpg')\n\n# Convert the image to grayscale\ngray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n# Apply some image processing operations\n# ...\n\n# Show the image\ncv2.imshow('Image', gray)\ncv2.waitKey(0)\ncv2.destroyAllWindows()"
45,218,"// src/main.ts\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n\n// src/app.module.ts\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n// src/app.controller.ts\nimport { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n// src/app.service.ts\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}"
27,108,"import tensorflow as tf\n\n# Define your model architecture\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', input_shape=(784,)),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile your model\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(),\n              metrics=['accuracy'])\n\n# Load your dataset\n(train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.mnist.load_data()\n\n# Preprocess your data\ntrain_images = train_images.reshape((60000, 784)) / 255.0\ntest_images = test_images.reshape((10000, 784)) / 255.0\n\n# Train your model\nmodel.fit(train_images, train_labels, epochs=10, batch_size=32, validation_data=(test_images, test_labels))\n\n# Evaluate your model\ntest_loss, test_acc = model.evaluate(test_images, test_labels)\nprint('Test accuracy:', test_acc)"
25,110,"from sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the iris dataset\niris = load_iris()\nX = iris.data\ny = iris.target\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create a logistic regression model\nmodel = LogisticRegression()\n\n# Train the model using the training data\nmodel.fit(X_train, y_train)\n\n# Make predictions on the test data\ny_pred = model.predict(X_test)\n\n# Evaluate the model\naccuracy = model.score(X_test, y_test)\n\nprint(\"Accuracy:\", accuracy)"
11,107,"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load example dataset\niris = sns.load_dataset(\"iris\")\n\n# Create scatter plot\nsns.scatterplot(data=iris, x=\"sepal_length\", y=\"sepal_width\", hue=\"species\")\n\n# Show the plot\nplt.show()"
15,101,"# myproject/urls.py\nfrom django.urls import path\nfrom .views import HomeView\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n]\n\n# myproject/views.py\nfrom django.views import View\nfrom django.http import HttpResponse\n\nclass HomeView(View):\n    def get(self, request):\n        return HttpResponse(\"Hello, World!\")"
8,213,"// pages/index.tsx\nimport { NextPage } from 'next';\n\nconst Home: NextPage = () => {\n  return <div>Hello World!</div>;\n};\n\nexport default Home;"
45,218,"// main.ts\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n\n// app.module.ts\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n// app.controller.ts\nimport { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n// app.service.ts\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}"
34,302,"// src/Controller/DefaultController.php\n\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n\nclass DefaultController extends AbstractController\n{\n    /**\n     * @Route(\"/\")\n     */\n    public function index(): Response\n    {\n        return $this->render('default/index.html.twig');\n    }\n}</code>\n<code>// config/routes.yaml\n\nindex:\n    path: /\n    controller: App\\Controller\\DefaultController::index</code>\n<code>// templates/default/index.html.twig\n\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Welcome to my Symfony app</title>\n    </head>\n    <body>\n        <h1>Hello, Symfony!</h1>\n    </body>\n</html>"
42,106,"import torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        \n        self.conv1 = nn.Conv2d(3, 32, kernel_size=3)\n        self.conv2 = nn.Conv2d(32, 64, kernel_size=3)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.fc1 = nn.Linear(64 * 6 * 6, 128)\n        self.fc2 = nn.Linear(128, 10)\n        \n    def forward(self, x):\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.pool(F.relu(self.conv2(x)))        \n        x = x.view(-1, 64 * 6 * 6)\n        x = F.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n\nnet = Net()\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)\n\n# Training loop\nfor epoch in range(10):\n    running_loss = 0.0\n    for i, data in enumerate(trainloader, 0):\n        inputs, labels = data\n        optimizer.zero_grad()\n        outputs = net(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n        running_loss += loss.item()\n        if i % 2000 == 1999:\n            print(f\"[{epoch + 1}, {i + 1}] loss: {running_loss / 2000:.3f}\")\n            running_loss = 0.0\n\nprint(\"Training finished.\")"
