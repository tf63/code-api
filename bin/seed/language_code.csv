nrow,language_id,content
17,3,"class Calculator {\n  add(a: number, b: number): number {\n    return a + b;\n  }\n}\n\ndescribe(\"Calculator\", () => {\n  let calculator: Calculator;\n\n  beforeEach(() => {\n    calculator = new Calculator();\n  });\n\n  it(\"should add two numbers correctly\", () => {\n    expect(calculator.add(2, 3)).toEqual(5);\n  });\n});"
29,15,"void main() {\n  String welcomeMessage = sayHello(\"John\");\n  print(welcomeMessage);\n\n  int sum = addNumbers(5, 3);\n  print(\"Sum: $sum\");\n\n  double result = multiplyNumbers(2.5, 4);\n  print(\"Result: $result\");\n\n  bool isEven = checkEven(8);\n  print(\"Is even? $isEven\");\n}\n\nString sayHello(String name) {\n  return \"Hello, $name!\";\n}\n\nint addNumbers(int a, int b) {\n  return a + b;\n}\n\ndouble multiplyNumbers(double a, double b) {\n  return a * b;\n}\n\nbool checkEven(int number) {\n  return number % 2 == 0;\n}"
19,5,"#include <stdio.h>\n\nint main() {\n    char name[50];\n    int age;\n\n    printf(\"Enter your name: \");\n    scanf(\"%s\", name);\n\n    printf(\"Enter your age: \");\n    scanf(\"%d\", &age);\n\n    printf(\"Name: %s\\n\", name);\n    printf(\"Age: %d\\n\", age);\n\n    return 0;\n}"
30,11,"import java.util.HashMap;\nimport java.util.Map;\n\npublic class MapExample {\n    public static void main(String[] args) {\n        Map<Integer, String> map = new HashMap<>();\n\n        // Adding key-value pairs to the map\n        map.put(1, \"Apple\");\n        map.put(2, \"Banana\");\n        map.put(3, \"Orange\");\n\n        // Accessing values from the map\n        System.out.println(\"Value at key 1: \" + map.get(1));\n        System.out.println(\"Value at key 2: \" + map.get(2));\n        System.out.println(\"Value at key 3: \" + map.get(3));\n\n        // Iterating over the map\n        System.out.println(\"\\nIterating over the map:\");\n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        // Removing a key-value pair from the map\n        map.remove(2);\n        System.out.println(\"\\nMap after removing key 2:\");\n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value:"
36,7,"using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Dictionary<string, int> map = new Dictionary<string, int>();\n\n        // Adding elements to the map\n        map.Add(\"apple\", 1);\n        map.Add(\"banana\", 2);\n        map.Add(\"carrot\", 3);\n\n        Console.WriteLine(\"Map:\");\n\n        // Printing key-value pairs of the map\n        foreach (KeyValuePair<string, int> pair in map)\n        {\n            Console.WriteLine(pair.Key + \": \" + pair.Value);\n        }\n\n        string key = \"apple\";\n\n        // Checking if the map contains a specific key\n        if (map.ContainsKey(key))\n        {\n            int value = map[key];\n            Console.WriteLine(\"Value of \" + key + \": \" + value);\n        }\n        else\n        {\n            Console.WriteLine(\"Key not found in the map.\");\n        }\n    }\n}"
36,6,"#include <iostream>\n#include <set>\n\nint main() {\n std::set<int> mySet;\n\n mySet.insert(5);\n mySet.insert(2);\n mySet.insert(8);\n mySet.insert(1);\n mySet.insert(10);\n\n std::cout << \"Set: \";\n for (const auto& element : mySet) {\n std::cout << element << \" \";\n }\n std::cout << std::endl;\n\n int numberToRemove = 2;\n mySet.erase(numberToRemove);\n\n std::cout << \"Set after removing \" << numberToRemove << \": \";\n for (const auto& element : mySet) {\n std::cout << element << \" \";\n }\n std::cout << std::endl;\n\n int numberToFind = 8;\n if (mySet.find(numberToFind) != mySet.end()) {\n std::cout << numberToFind << \" is found in the set.\" << std::endl;\n } else {\n std::cout << numberToFind << \" is not found in the set.\" << std::endl;\n }\n\n return 0;\n}"
47,2,"package main\n\nimport \"testing\"\n\nfunc Add(a, b int) int {\n    return a + b\n}\n\nfunc TestAdd(t *testing.T) {\n    result := Add(2, 3)\n    if result != 5 {\n        t.Errorf(\"Expected result to be 5, but got %d\", result)\n    }\n}\n\nfunc Subtract(a, b int) int {\n    return a - b\n}\n\nfunc TestSubtract(t *testing.T) {\n    result := Subtract(5, 3)\n    if result != 2 {\n        t.Errorf(\"Expected result to be 2, but got %d\", result)\n    }\n}\n\nfunc Multiply(a, b int) int {\n    return a * b\n}\n\nfunc TestMultiply(t *testing.T) {\n    result := Multiply(2, 3)\n    if result != 6 {\n        t.Errorf(\"Expected result to be 6, but got %d\", result)\n    }\n}\n\nfunc Divide(a, b int) int {\n    if b == 0 {\n        return 0\n    }\n    return a / b\n}\n\nfunc TestDivide(t *testing.T) {\n    result := Divide(6, 2)\n    if result !="
10,13,"factorial :: Integer -> Integer\nfactorial 0 = 1\nfactorial n = n * factorial (n-1)\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter a number:\"\n    n <- readLn :: IO Integer\n    let result = factorial n\n    putStrLn $ \"Factorial of \" ++ show n ++ \" is: \" ++ show result"
24,3,"class Person {\n  private name: string;\n  private age: number;\n\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  getAge(): number {\n    return this.age;\n  }\n\n  introduce(): void {\n    console.log(`Hi, my name is ${this.name} and I am ${this.age} years old.`);\n  }\n}\n\nconst person = new Person(\"John\", 25);\nperson.introduce();"
35,17,"module Main exposing (..)\n\ntype alias Point =\n    { x : Float\n    , y : Float\n    }\n\n\ntype alias Circle =\n    { center : Point\n    , radius : Float\n    }\n\n\ntype alias Rectangle =\n    { position : Point\n    , width : Float\n    , height : Float\n    }\n\n\ntype alias Triangle =\n    { p1 : Point\n    , p2 : Point\n    , p3 : Point\n    }\n\n\nmain = \n    let\n        circle = Circle { center = Point { x = 0, y = 0 }, radius = 5 }\n        rectangle = Rectangle { position = Point { x = 0, y = 0 }, width = 10, height = 20 }\n        triangle = Triangle { p1 = Point { x = 0, y = 0 }, p2 = Point { x = 5, y = 10 }, p3 = Point { x = 10, y = 0 } }\n    in\n    Html.text \"Creating instances of classes in Elm!\"
15,2,"package main\n\nimport \"testing\"\n\nfunc Add(a, b int) int {\n    return a + b\n}\n\nfunc TestAdd(t *testing.T) {\n    result := Add(2, 3)\n    expected := 5\n    if result != expected {\n        t.Errorf(\"Add function returned incorrect result, got: %d, want: %d\", result, expected)\n    }\n}"
9,3,"let num: number = 10;\n\nif (num > 0) {\n    console.log(\"Number is positive\");\n} else if (num < 0) {\n    console.log(\"Number is negative\");\n} else {\n    console.log(\"Number is zero\");\n}"
