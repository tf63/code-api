nrow,language_id,content
17,3,"class Calculator {\n  add(a: number, b: number): number {\n    return a + b;\n  }\n}\n\ndescribe(\"Calculator\", () => {\n  let calculator: Calculator;\n\n  beforeEach(() => {\n    calculator = new Calculator();\n  });\n\n  it(\"should add two numbers correctly\", () => {\n    expect(calculator.add(2, 3)).toEqual(5);\n  });\n});"
29,15,"void main() {\n  String welcomeMessage = sayHello(\"John\");\n  print(welcomeMessage);\n\n  int sum = addNumbers(5, 3);\n  print(\"Sum: $sum\");\n\n  double result = multiplyNumbers(2.5, 4);\n  print(\"Result: $result\");\n\n  bool isEven = checkEven(8);\n  print(\"Is even? $isEven\");\n}\n\nString sayHello(String name) {\n  return \"Hello, $name!\";\n}\n\nint addNumbers(int a, int b) {\n  return a + b;\n}\n\ndouble multiplyNumbers(double a, double b) {\n  return a * b;\n}\n\nbool checkEven(int number) {\n  return number % 2 == 0;\n}"
19,5,"#include <stdio.h>\n\nint main() {\n    char name[50];\n    int age;\n\n    printf(\"Enter your name: \");\n    scanf(\"%s\", name);\n\n    printf(\"Enter your age: \");\n    scanf(\"%d\", &age);\n\n    printf(\"Name: %s\\n\", name);\n    printf(\"Age: %d\\n\", age);\n\n    return 0;\n}"
30,11,"import java.util.HashMap;\nimport java.util.Map;\n\npublic class MapExample {\n    public static void main(String[] args) {\n        Map<Integer, String> map = new HashMap<>();\n\n        // Adding key-value pairs to the map\n        map.put(1, \"Apple\");\n        map.put(2, \"Banana\");\n        map.put(3, \"Orange\");\n\n        // Accessing values from the map\n        System.out.println(\"Value at key 1: \" + map.get(1));\n        System.out.println(\"Value at key 2: \" + map.get(2));\n        System.out.println(\"Value at key 3: \" + map.get(3));\n\n        // Iterating over the map\n        System.out.println(\"\\nIterating over the map:\");\n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n        }\n\n        // Removing a key-value pair from the map\n        map.remove(2);\n        System.out.println(\"\\nMap after removing key 2:\");\n        for (Map.Entry<Integer, String> entry : map.entrySet()) {\n            System.out.println(\"Key: \" + entry.getKey() + \", Value:"
36,7,"using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Dictionary<string, int> map = new Dictionary<string, int>();\n\n        // Adding elements to the map\n        map.Add(\"apple\", 1);\n        map.Add(\"banana\", 2);\n        map.Add(\"carrot\", 3);\n\n        Console.WriteLine(\"Map:\");\n\n        // Printing key-value pairs of the map\n        foreach (KeyValuePair<string, int> pair in map)\n        {\n            Console.WriteLine(pair.Key + \": \" + pair.Value);\n        }\n\n        string key = \"apple\";\n\n        // Checking if the map contains a specific key\n        if (map.ContainsKey(key))\n        {\n            int value = map[key];\n            Console.WriteLine(\"Value of \" + key + \": \" + value);\n        }\n        else\n        {\n            Console.WriteLine(\"Key not found in the map.\");\n        }\n    }\n}"
36,6,"#include <iostream>\n#include <set>\n\nint main() {\n std::set<int> mySet;\n\n mySet.insert(5);\n mySet.insert(2);\n mySet.insert(8);\n mySet.insert(1);\n mySet.insert(10);\n\n std::cout << \"Set: \";\n for (const auto& element : mySet) {\n std::cout << element << \" \";\n }\n std::cout << std::endl;\n\n int numberToRemove = 2;\n mySet.erase(numberToRemove);\n\n std::cout << \"Set after removing \" << numberToRemove << \": \";\n for (const auto& element : mySet) {\n std::cout << element << \" \";\n }\n std::cout << std::endl;\n\n int numberToFind = 8;\n if (mySet.find(numberToFind) != mySet.end()) {\n std::cout << numberToFind << \" is found in the set.\" << std::endl;\n } else {\n std::cout << numberToFind << \" is not found in the set.\" << std::endl;\n }\n\n return 0;\n}"
47,2,"package main\n\nimport \"testing\"\n\nfunc Add(a, b int) int {\n    return a + b\n}\n\nfunc TestAdd(t *testing.T) {\n    result := Add(2, 3)\n    if result != 5 {\n        t.Errorf(\"Expected result to be 5, but got %d\", result)\n    }\n}\n\nfunc Subtract(a, b int) int {\n    return a - b\n}\n\nfunc TestSubtract(t *testing.T) {\n    result := Subtract(5, 3)\n    if result != 2 {\n        t.Errorf(\"Expected result to be 2, but got %d\", result)\n    }\n}\n\nfunc Multiply(a, b int) int {\n    return a * b\n}\n\nfunc TestMultiply(t *testing.T) {\n    result := Multiply(2, 3)\n    if result != 6 {\n        t.Errorf(\"Expected result to be 6, but got %d\", result)\n    }\n}\n\nfunc Divide(a, b int) int {\n    if b == 0 {\n        return 0\n    }\n    return a / b\n}\n\nfunc TestDivide(t *testing.T) {\n    result := Divide(6, 2)\n    if result !="
10,13,"factorial :: Integer -> Integer\nfactorial 0 = 1\nfactorial n = n * factorial (n-1)\n\nmain :: IO ()\nmain = do\n    putStrLn \"Enter a number:\"\n    n <- readLn :: IO Integer\n    let result = factorial n\n    putStrLn $ \"Factorial of \" ++ show n ++ \" is: \" ++ show result"
24,3,"class Person {\n  private name: string;\n  private age: number;\n\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  getAge(): number {\n    return this.age;\n  }\n\n  introduce(): void {\n    console.log(`Hi, my name is ${this.name} and I am ${this.age} years old.`);\n  }\n}\n\nconst person = new Person(\"John\", 25);\nperson.introduce();"
35,17,"module Main exposing (..)\n\ntype alias Point =\n    { x : Float\n    , y : Float\n    }\n\n\ntype alias Circle =\n    { center : Point\n    , radius : Float\n    }\n\n\ntype alias Rectangle =\n    { position : Point\n    , width : Float\n    , height : Float\n    }\n\n\ntype alias Triangle =\n    { p1 : Point\n    , p2 : Point\n    , p3 : Point\n    }\n\n\nmain = \n    let\n        circle = Circle { center = Point { x = 0, y = 0 }, radius = 5 }\n        rectangle = Rectangle { position = Point { x = 0, y = 0 }, width = 10, height = 20 }\n        triangle = Triangle { p1 = Point { x = 0, y = 0 }, p2 = Point { x = 5, y = 10 }, p3 = Point { x = 10, y = 0 } }\n    in\n    Html.text \"Creating instances of classes in Elm!\"
15,2,"package main\n\nimport \"testing\"\n\nfunc Add(a, b int) int {\n    return a + b\n}\n\nfunc TestAdd(t *testing.T) {\n    result := Add(2, 3)\n    expected := 5\n    if result != expected {\n        t.Errorf(\"Add function returned incorrect result, got: %d, want: %d\", result, expected)\n    }\n}"
9,3,"let num: number = 10;\n\nif (num > 0) {\n    console.log(\"Number is positive\");\n} else if (num < 0) {\n    console.log(\"Number is negative\");\n} else {\n    console.log(\"Number is zero\");\n}"
10,13,"main :: IO ()\nmain = do\n    let result = divide 10 0\n    case result of\n        Left errorMsg -> putStrLn $ \"Error: \" ++ errorMsg\n        Right value -> putStrLn $ \"Result: \" ++ show value\n\ndivide :: Int -> Int -> Either String Int\ndivide x 0 = Left \"Cannot divide by zero\"\ndivide x y = Right (x `div` y)"
64,6,"#include <iostream>\nusing namespace std;\n\nclass Rectangle {\n    private:\n        double length;\n        double width;\n        \n    public:\n        // Constructor\n        Rectangle(double l, double w) {\n            length = l;\n            width = w;\n        }\n        \n        // Getter methods\n        double getLength() {\n            return length;\n        }\n        \n        double getWidth() {\n            return width;\n        }\n        \n        // Setter methods\n        void setLength(double l) {\n            length = l;\n        }\n        \n        void setWidth(double w) {\n            width = w;\n        }\n        \n        // Calculate area\n        double calculateArea() {\n            return length * width;\n        }\n        \n        // Calculate perimeter\n        double calculatePerimeter() {\n            return 2 * (length + width);\n        }\n};\n\nint main() {\n    Rectangle rectangle(5.0, 3.0);\n\n    cout << \"Rectangle properties:\" << endl;\n    cout << \"Length: \" << rectangle.getLength() << endl;\n    cout << \"Width: \" << rectangle.getWidth() << endl;\n    cout << \"Area: \" << rectangle.calculateArea() << endl;\n    cout << \"Perimeter: \" << rectangle.calculatePerimeter() << endl;\n\n    rectangle.setLength(7.0);\n    rectangle.setWidth(4.0);\n\n    cout << \"Updated rectangle properties:\" << endl;\n    cout << \"Length: \" << rectangle.getLength() << endl;\n    cout << \"Width: \" << rectangle.getWidth() << endl;\n    cout << \"Area: \" << rectangle.calculateArea() << endl;\n    cout << \"Perimeter: \" << rectangle.calculatePerimeter() << endl;\n\n    return 0;\n}"
39,11,"response: \n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ListOperations {\n\n    public static void main(String[] args) {\n        List<String> mylist = new ArrayList<>();\n\n        // Add elements to the list\n        mylist.add(\"Apple\");\n        mylist.add(\"Banana\");\n        mylist.add(\"Orange\");\n\n        System.out.println(\"List: \" + mylist);\n\n        // Access elements in the list\n        String firstElement = mylist.get(0);\n        System.out.println(\"First element: \" + firstElement);\n\n        // Update elements in the list\n        mylist.set(1, \"Grapes\");\n        System.out.println(\"List after updating: \" + mylist);\n\n        // Remove elements from the list\n        mylist.remove(0);\n        System.out.println(\"List after removing: \" + mylist);\n\n        // Check if an element exists in the list\n        boolean containsElement = mylist.contains(\"Orange\");\n        System.out.println(\"Does list contain Orange? \" + containsElement);\n\n        // Get the size of the list\n        int size = mylist.size();\n        System.out.println(\"Size of the list: \" + size);\n    }\n}\n```"
29,10,"class Car {\n    var brand: String\n    var model: String\n    var year: Int\n    \n    init(brand: String, model: String, year: Int) {\n        self.brand = brand\n        self.model = model\n        self.year = year\n    }\n    \n    func startEngine() {\n        print(\"\\(brand) \\(model) engine started.\")\n    }\n    \n    func accelerate() {\n        print(\"\\(brand) \\(model) is accelerating.\")\n    }\n    \n    func brake() {\n        print(\"\\(brand) \\(model) is braking.\")\n    }\n}\n\n// Example usage\nlet myCar = Car(brand: \"Toyota\", model: \"Corolla\", year: 2021)\nmyCar.startEngine()\nmyCar.accelerate()\nmyCar.brake()"
16,7,"using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int result = Sum(5, 10);\n        Console.WriteLine(result);\n    }\n\n    static int Sum(int num1, int num2)\n    {\n        int sum = num1 + num2;\n        return sum;\n    }\n}"
33,16,"defmodule Person do\n  defstruct name: \"\", age: 0\n\n  def new(name, age) do\n    %Person{name: name, age: age}\n  end\n\n  def get_name(person) do\n    person.name\n  end\n\n  def get_age(person) do\n    person.age\n  end\n\n  def set_name(person, name) do\n    %Person{person | name: name}\n  end\n\n  def set_age(person, age) do\n    %Person{person | age: age}\n  end\nend\n\nperson = Person.new(\"John\", 25)\nIO.puts \"Name: #{Person.get_name(person)}\"\nIO.puts \"Age: #{Person.get_age(person)}\"\n\nperson = Person.set_name(person, \"Mike\")\nperson = Person.set_age(person, 30)\n\nIO.puts \"Updated Name: #{Person.get_name(person)}\"\nIO.puts \"Updated Age: #{Person.get_age(person)}\""
20,4,"const myMap = new Map();\n\nmyMap.set(\"key1\", \"value1\");\nmyMap.set(\"key2\", \"value2\");\nmyMap.set(\"key3\", \"value3\");\n\nconsole.log(\"Map size:\", myMap.size);\n\nconsole.log(\"Map entries:\");\nfor (const [key, value] of myMap) {\n  console.log(key, \"=\", value);\n}\n\nconst key = \"key2\";\nif (myMap.has(key)) {\n  const value = myMap.get(key);\n  console.log(`Value of ${key}:`, value);\n} else {\n  console.log(\"Key not found in the map.\");\n}"
17,3,"function main() {\n    const fruits = ['apple', 'banana', 'orange'];\n\n    console.log('All fruits:');\n    for (let i = 0; i < fruits.length; i++) {\n        console.log(fruits[i]);\n    }\n\n    console.log('Only bananas:');\n    for (let fruit of fruits) {\n        if (fruit === 'banana') {\n            console.log(fruit);\n        }\n    }\n}\n\nmain();"
30,17,"module Main exposing (..)\n\nimport Html exposing (Html, div, text)\n\ntype Error\n    = MissingField\n    | InvalidValue\n\ntype alias User =\n    { name : String\n    , age : Int\n    }\n\nvalidateUser : User -> Result Error User\nvalidateUser user =\n    if String.isEmpty user.name then\n        Err MissingField\n\n    else if user.age < 0 then\n        Err InvalidValue\n\n    else\n        Ok user\n\nmain : Html msg\nmain =\n    div []\n        [ text \"Welcome to Error Handling in Elm!\"]\n"
51,17,"module Main exposing (..)\n\nimport Set exposing (Set)\n\nmain : Program () Model Msg\nmain =\n    Html.program\n        { init = init\n        , update = update\n        , view = view\n        , subscriptions = subscriptions\n        }\n\ntype alias Model =\n    { set : Set String\n    }\n\ninit : ( Model, Cmd Msg )\ninit =\n    ( { set = Set.fromList [ \"apple\", \"banana\", \"pear\" ] }\n    , Cmd.none\n    )\n\ntype Msg\n    = Add String\n    | Remove String\n\nupdate : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n    case msg of\n        Add item ->\n            ( { model | set = Set.insert item model.set }\n            , Cmd.none\n            )\n\n        Remove item ->\n            ( { model | set = Set.remove item model.set }\n            , Cmd.none\n            )\n\nsubscriptions : Model -> Sub Msg\nsubscriptions model =\n    Sub.none\n\nview : Model -> Html Msg\nview model =\n    Html.div []\n        [ Html.button [ onClick (Add \"orange\") ] [ Html.text \"Add orange\" ]\n        , Html.button [ onClick (Remove \"banana\") ] [ Html.text \"Remove banana\" ]\n        , Html.p [] [ Html.text (\"Set: \" ++ String.join \", \" (Set.toList model.set)) ]\n        ]"
30,7,"using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        HashSet<string> set = new HashSet<string>();\n\n        set.Add(\"Apple\");\n        set.Add(\"Banana\");\n        set.Add(\"Orange\");\n\n        Console.WriteLine(\"Set:\");\n        foreach (string item in set)\n        {\n            Console.WriteLine(item);\n        }\n\n        string searchItem = \"Banana\";\n        if (set.Contains(searchItem))\n        {\n            Console.WriteLine($\"'{searchItem}' is in the set\");\n        }\n        else\n        {\n            Console.WriteLine($\"'{searchItem}' is not in the set\");\n        }\n    }\n}"
11,15,"void main() {\n  int number = 10;\n  \n  if (number > 0) {\n    print(\"The number is positive.\");\n  } else if (number < 0) {\n    print(\"The number is negative.\");\n  } else {\n    print(\"The number is zero.\");\n  }\n}"
28,6,"#include <iostream>\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i*i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    int number;\n\n    std::cout << \"Enter a number: \";\n    std::cin >> number;\n\n    if (isPrime(number)) {\n        std::cout << number << \" is a prime number.\" << std::endl;\n    } else {\n        std::cout << number << \" is not a prime number.\" << std::endl;\n    }\n\n    return 0;\n}"
16,10,"var mySet: Set<String> = [\"apple\", \"banana\", \"orange\"]\n\nprint(\"Initial set: \\(mySet)\")\n\nmySet.insert(\"watermelon\")\nprint(\"After inserting an element: \\(mySet)\")\n\nmySet.remove(\"banana\")\nprint(\"After removing an element: \\(mySet)\")\n\nlet containsOrange = mySet.contains(\"orange\")\nif containsOrange {\n    print(\"Set contains 'orange'\")\n} else {\n    print(\"Set does not contain 'orange'\")\n}"
15,10,"func factorial(_ n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * factorial(n - 1)\n    }\n}\n\nfunc main() {\n    let number = 5\n    let result = factorial(number)\n    print(\"The factorial of \\(number) is \\(result)\")\n}\n\nmain()"
23,12,"list = [1, 2, 3, 4, 5]\nputs \"List: #{list}\"\n\nlist.push(6)\nputs \"After pushing an element: #{list}\"\n\nlist.pop\nputs \"After popping an element: #{list}\"\n\nelement = list[2]\nputs \"The element at index 2 is: #{element}\"\n\nif list.include?(5)\n    puts \"5 is in the list\"\nelse\n    puts \"5 is not in the list\"\nend\n\nlist.sort!\nputs \"After sorting the list: #{list}\"\n\nlist.reverse!\nputs \"After reversing the list: #{list}\""
24,3,"let myMap = new Map();\n\n// Adding elements to the map\nmyMap.set(\"name\", \"John\");\nmyMap.set(\"age\", 30);\nmyMap.set(\"city\", \"New York\");\n\n// Accessing elements from the map\nconsole.log(\"Name: \" + myMap.get(\"name\"));\nconsole.log(\"Age: \" + myMap.get(\"age\"));\nconsole.log(\"City: \" + myMap.get(\"city\"));\n\n// Checking if an element exists in the map\nif (myMap.has(\"city\")) {\n    console.log(\"City exists in the map\");\n} else {\n    console.log(\"City does not exist in the map\");\n}\n\n// Removing an element from the map\nmyMap.delete(\"age\");\n\n// Checking the size of the map\nconsole.log(\"Size of the map: \" + myMap.size);"
42,18,"function addition(a, b)\n    return a + b\nend\n\nfunction subtraction(a, b)\n    return a - b\nend\n\nfunction multiplication(a, b)\n    return a * b\nend\n\nfunction division(a, b)\n    if b != 0\n        return a / b\n    else\n        error(\"Division by zero is not allowed.\")\n    end\nend\n\n# Test addition function\nresult = addition(5, 3)\nprintln(\"Addition: 5 + 3 = $result\")\n\n# Test subtraction function\nresult = subtraction(8, 4)\nprintln(\"Subtraction: 8 - 4 = $result\")\n\n# Test multiplication function\nresult = multiplication(6, 2)\nprintln(\"Multiplication: 6 * 2 = $result\")\n\n# Test division function\nresult = division(10, 2)\nprintln(\"Division: 10 / 2 = $result\")\n\n# Test division by zero\ntry\n    result = division(5, 0)\ncatch ex\n    println(ex)\nend"
25,11,"public class RecursiveExample {\n    public static void main(String[] args) {\n        int n = 5;\n        System.out.println(\"Factorial of \" + n + \" is \" + factorial(n));\n\n        int[] array = {1, 2, 3, 4, 5};\n        System.out.println(\"Sum of elements in the array is \" + sum(array, array.length));\n    }\n\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static int sum(int[] array, int n) {\n        if (n <= 0) {\n            return 0;\n        } else {\n            return sum(array, n - 1) + array[n - 1];\n        }\n    }\n}"
17,13,"import qualified Data.Map as Map\n\nmain :: IO ()\nmain = do\n    let dictionary = Map.fromList [\n            (\"apple\", \"a round fruit with red or green skin and firm white flesh\"),\n            (\"banana\", \"a long curved fruit with a yellow skin\"),\n            (\"carrot\", \"a long, thin, orange vegetable\")\n        ]\n    \n    putStrLn \"Dictionary:\"\n    mapM_ (\\(word, definition) -> putStrLn $ word ++ \": \" ++ definition) $ Map.toList dictionary\n    \n    let word = \"apple\"\n    case Map.lookup word dictionary of\n        Just definition -> putStrLn $ \"Definition of \" ++ word ++ \": \" ++ definition\n        Nothing -> putStrLn \"Word not found in the dictionary.\""
22,11,"public class ForLoopDemo {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n\n        System.out.println(\"Printing numbers using a for loop:\");\n        for (int i = 0; i < numbers.length; i++) {\n            System.out.println(numbers[i]);\n        }\n\n        System.out.println(\"Printing numbers in reverse order using a for loop:\");\n        for (int i = numbers.length - 1; i >= 0; i--) {\n            System.out.println(numbers[i]);\n        }\n\n        System.out.println(\"Printing even numbers using a for loop:\");\n        for (int number : numbers) {\n            if (number % 2 == 0) {\n                System.out.println(number);\n            }\n        }\n    }\n}"
20,14,"use std::collections::HashSet;\n\nfn main() {\n    let mut set: HashSet<i32> = HashSet::new();\n\n    set.insert(1);\n    set.insert(2);\n    set.insert(3);\n    set.insert(4);\n    set.insert(5);\n\n    println!(\"Set: {:?}\", set);\n\n    let element = 3;\n    if set.contains(&element) {\n        println!(\"Set contains element {}\", element);\n    } else {\n        println!(\"Set does not contain element {}\", element);\n    }\n}"
41,3,"function sum(a: number, b: number): number {\n  return a + b;\n}\n\nfunction subtract(a: number, b: number): number {\n  return a - b;\n}\n\nfunction multiply(a: number, b: number): number {\n  return a * b;\n}\n\nfunction divide(a: number, b: number): number {\n  if (b === 0) {\n    throw new Error(\"Division by zero\");\n  }\n  return a / b;\n}\n\nfunction test() {\n  let result = sum(2, 3);\n  console.log(`2 + 3 = ${result}`);\n  \n  result = subtract(5, 2);\n  console.log(`5 - 2 = ${result}`);\n  \n  result = multiply(4, 2);\n  console.log(`4 * 2 = ${result}`);\n  \n  result = divide(10, 5);\n  console.log(`10 / 5 = ${result}`);\n  \n  try {\n    result = divide(8, 0);\n    console.log(`8 / 0 = ${result}`);\n  } catch (error) {\n    console.log(\"Error:\", error.message);\n  }\n}\n\ntest();"
35,11,"import java.util.HashSet;\nimport java.util.Set;\n\npublic class SetExample {\n    public static void main(String[] args) {\n        Set<String> fruits = new HashSet<>();\n        \n        // Adding elements to the set\n        fruits.add(\"Apple\");\n        fruits.add(\"Banana\");\n        fruits.add(\"Orange\");\n        fruits.add(\"Grapes\");\n        fruits.add(\"Mango\");\n        \n        System.out.println(\"Fruits: \" + fruits);\n        System.out.println(\"Size of the set: \" + fruits.size());\n        \n        // Checking if an element is present in the set\n        String fruit = \"Apple\";\n        if (fruits.contains(fruit)) {\n            System.out.println(fruit + \" is present in the set\");\n        } else {\n            System.out.println(fruit + \" is not present in the set\");\n        }\n        \n        // Removing an element from the set\n        fruit = \"Orange\";\n        fruits.remove(fruit);\n        System.out.println(\"Fruits after removing \" + fruit + \": \" + fruits);\n        \n        // Clearing the set\n        fruits.clear();\n        System.out.println(\"Fruits after clearing the set: \" + fruits);\n    }\n}"
12,18,"function error_handling()\n    try\n        # code that may produce an error\n        throw(\"This is an example error.\")\n    catch e\n        println(\"An error occurred: $e\")\n    finally\n        println(\"Error handling complete.\")\n    end\nend\n\nerror_handling()"
28,3,"const mySet = new Set<number>();\n\nmySet.add(1);\nmySet.add(2);\nmySet.add(3);\nmySet.add(2); // Duplicates are not allowed in a set\n\nconsole.log(\"Set size:\", mySet.size);\n\nconsole.log(\"Set elements:\");\nmySet.forEach((val) => {\n  console.log(val);\n});\n\nconsole.log(\"Check if 2 is in the set:\", mySet.has(2));\n\nmySet.delete(1);\n\nconsole.log(\"Updated set size:\", mySet.size);\n\nconsole.log(\"Updated set elements:\");\nmySet.forEach((val) => {\n  console.log(val);\n});\n\nmySet.clear();\n\nconsole.log(\"Cleared set size:\", mySet.size);"
28,2,"package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\t// Open file for reading\n\tfile, err := os.Open(\"input.txt\")\n\tif err != nil {\n\t\tfmt.Println(\"Error opening file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\t// Read file content\n\tcontent := make([]byte, 1024)\n\tbytesRead, err := file.Read(content)\n\tif err != nil {\n\t\tfmt.Println(\"Error reading file:\", err)\n\t\treturn\n\t}\n\n\tfmt.Printf(\"Read %d bytes from file:\\n%s\\n\", bytesRead, content[:bytesRead])\n}"
9,17,"module Main exposing (main)\n\nimport Html exposing (Html, div, h1)\n\nmain : Html msg\nmain =\n    div []\n        [ h1 [] [ \"Error Handling in Elm\" ]\n        ]"
21,14,"use std::collections::HashMap;\n\nfn main() {\n    let mut dictionary: HashMap<&str, &str> = HashMap::new();\n\n    dictionary.insert(\"apple\", \"a round fruit with red or green skin and firm white flesh\");\n    dictionary.insert(\"banana\", \"a long curved fruit with a yellow skin\");\n    dictionary.insert(\"carrot\", \"a long, thin, orange vegetable\");\n\n    println!(\"Dictionary:\");\n    for (word, definition) in &dictionary {\n        println!(\"{}: {}\", word, definition);\n    }\n\n    let word = \"apple\";\n    if let Some(&definition) = dictionary.get(word) {\n        println!(\"Definition of {}: {}\", word, definition);\n    } else {\n        println!(\"Word not found in the dictionary.\");\n    }\n}"
17,8,"&lt;?php\n\n$score = 85;\n\nif ($score >= 90) {\n    echo \"Your grade is A.\";\n} elseif ($score >= 80) {\n    echo \"Your grade is B.\";\n} elseif ($score >= 70) {\n    echo \"Your grade is C.\";\n} elseif ($score >= 60) {\n    echo \"Your grade is D.\";\n} else {\n    echo \"Your grade is F.\";\n}\n\n?&gt;"
23,10,"var myList = [1, 2, 3, 4, 5]\nprint(\"My list: \\(myList)\")\n\nmyList.append(6)\nprint(\"After appending an element: \\(myList)\")\n\nmyList.remove(at: 2)\nprint(\"After removing an element: \\(myList)\")\n\nlet element = myList[2]\nprint(\"The element at index 2 is: \\(element)\")\n\nif myList.contains(5) {\n    print(\"5 is in the list\")\n} else {\n    print(\"5 is not in the list\")\n}\n\nmyList.sort()\nprint(\"After sorting the list: \\(myList)\")\n\nmyList.reverse()\nprint(\"After reversing the list: \\(myList)\")"
20,12,"require 'set'\n\ndef set_operations()\n    set1 = Set.new([1, 2, 3, 4, 5])\n    set2 = Set.new([4, 5, 6, 7, 8])\n\n    union = set1.union(set2)\n    puts \"Union: #{union.to_a}\"\n\n    intersection = set1.intersection(set2)\n    puts \"Intersection: #{intersection.to_a}\"\n\n    difference = set1.difference(set2)\n    puts \"Difference: #{difference.to_a}\"\n\n    symmetric_difference = set1.symmetric_difference(set2)\n    puts \"Symmetric Difference: #{symmetric_difference.to_a}\"\nend\n\nset_operations()"
23,7,"using System;\n\nnamespace FunctionExample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(AddNumbers(5, 10));\n            Console.WriteLine(Greet(\"John\"));\n        }\n        \n        static int AddNumbers(int a, int b)\n        {\n            return a + b;\n        }\n        \n        static string Greet(string name)\n        {\n            return $\"Hello, {name}!\";\n        }\n    }\n}"
21,1,"import unittest\n\nclass MyTestCase(unittest.TestCase):\n    def test_addition(self):\n        result = 2 + 2\n        self.assertEqual(result, 4)\n\n    def test_subtraction(self):\n        result = 5 - 3\n        self.assertEqual(result, 2)\n\n    def test_multiplication(self):\n        result = 4 * 2\n        self.assertEqual(result, 8)\n\n    def test_division(self):\n        result = 10 / 2\n        self.assertEqual(result, 5)\n\nif __name__ == '__main__':\n    unittest.main()"
17,11,"public class Test {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int sum = 0;\n        \n        for (int number : numbers) {\n            sum += number;\n        }\n        \n        if (sum == 15) {\n            System.out.println(\"Test passed.\");\n        } else {\n            System.out.println(\"Test failed.\");\n        }\n    }\n}"
32,5,"#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint subtract(int a, int b) {\n    return a - b;\n}\n\nint multiply(int a, int b) {\n    return a * b;\n}\n\nint main() {\n    // Test the add() function\n    int result = add(3, 4);\n    printf(\"3 + 4 = %d\\n\", result);\n\n    // Test the subtract() function\n    result = subtract(7, 2);\n    printf(\"7 - 2 = %d\\n\", result);\n\n    // Test the multiply() function\n    result = multiply(5, 6);\n    printf(\"5 * 6 = %d\\n\", result);\n\n    return 0;\n}"
9,4,"function throwError() {\n    throw new Error('This is an example error.');\n}\n\ntry {\n    throwError();\n} catch (error) {\n    console.error('An error occurred:', error.message);\n}"
18,9,"class Person(val name: String, val age: Int) {\n\n    fun introduce() {\n        println(\"Hi, my name is $name and I am $age years old.\")\n    }\n\n    fun celebrateBirthday() {\n        println(\"It's my birthday!\")\n        println(\"Happy ${age + 1}th birthday to me!\")\n    }\n\n}\n\nfun main() {\n    val person = Person(\"John\", 25)\n    person.introduce()\n    person.celebrateBirthday()\n}"
