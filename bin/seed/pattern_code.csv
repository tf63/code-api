nrow,language_id,pattern_id,content
32,12,12,"class RealService\n  def operation\n    puts \"RealService: Performing operation...\"\n  end\nend\n\nclass ProxyService\n  def initialize(real_service)\n    @real_service = real_service\n  end\n\n  def operation\n    authenticate_user\n    @real_service.operation\n    log_operation\n  end\n\n  def authenticate_user\n    puts \"ProxyService: Authenticating user...\"\n  end\n\n  def log_operation\n    puts \"ProxyService: Logging operation...\"\n  end\nend\n\n# Example usage\nreal_service = RealService.new\nproxy_service = ProxyService.new(real_service)\n\nproxy_service.operation\n"
43,8,16,"class MyIterator implements Iterator {\n    private $position = 0;\n    private $data = [];\n\n    public function __construct(array $data)\n    {\n        $this->data = $data;\n    }\n\n    public function rewind()\n    {\n        $this->position = 0;\n    }\n\n    public function current()\n    {\n        return $this->data[$this->position];\n    }\n\n    public function key()\n    {\n        return $this->position;\n    }\n\n    public function next()\n    {\n        $this->position++;\n    }\n\n    public function valid()\n    {\n        return isset($this->data[$this->position]);\n    }\n}\n\n// Example usage\n$data = ['apple', 'banana', 'cherry'];\n$iterator = new MyIterator($data);\n\nforeach ($iterator as $item) {\n    echo $item . ' ';\n}\n// Output: apple banana cherry"
37,16,6,"defmodule LegacySystem do\n  def calculate(a, b) do\n    sum = a + b\n    IO.puts(\"Legacy System: Calculated sum: #{sum}\")\n  end\nend\n\ndefprotocol CalculationAdapter do\n  def calculate(a, b)\nend\n\ndefmodule LegacySystemAdapter do\n  defimpl CalculationAdapter do\n    def calculate(a, b) do\n      LegacySystem.calculate(a, b)\n    end\n  end\nend\n\ndefmodule NewSystem do\n  def makeCalculation(calculation) do\n    IO.puts(\"New System: Calculating...\")\n    calculation.calculate(10, 20)\n    IO.puts(\"New System: Calculation done!\")\n  end\nend\n\ndefmodule AdapterExample do\n  def run() do\n    newSystem = NewSystem\n    legacySystem = LegacySystemAdapter\n\n    newSystem.makeCalculation(legacySystem)\n  end\nend\n\nAdapterExample.run()"
