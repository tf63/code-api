nrow,language_id,pattern_id,content
32,12,12,"class RealService\n  def operation\n    puts \"RealService: Performing operation...\"\n  end\nend\n\nclass ProxyService\n  def initialize(real_service)\n    @real_service = real_service\n  end\n\n  def operation\n    authenticate_user\n    @real_service.operation\n    log_operation\n  end\n\n  def authenticate_user\n    puts \"ProxyService: Authenticating user...\"\n  end\n\n  def log_operation\n    puts \"ProxyService: Logging operation...\"\n  end\nend\n\n# Example usage\nreal_service = RealService.new\nproxy_service = ProxyService.new(real_service)\n\nproxy_service.operation\n"
43,8,16,"class MyIterator implements Iterator {\n    private $position = 0;\n    private $data = [];\n\n    public function __construct(array $data)\n    {\n        $this->data = $data;\n    }\n\n    public function rewind()\n    {\n        $this->position = 0;\n    }\n\n    public function current()\n    {\n        return $this->data[$this->position];\n    }\n\n    public function key()\n    {\n        return $this->position;\n    }\n\n    public function next()\n    {\n        $this->position++;\n    }\n\n    public function valid()\n    {\n        return isset($this->data[$this->position]);\n    }\n}\n\n// Example usage\n$data = ['apple', 'banana', 'cherry'];\n$iterator = new MyIterator($data);\n\nforeach ($iterator as $item) {\n    echo $item . ' ';\n}\n// Output: apple banana cherry"
37,16,6,"defmodule LegacySystem do\n  def calculate(a, b) do\n    sum = a + b\n    IO.puts(\"Legacy System: Calculated sum: #{sum}\")\n  end\nend\n\ndefprotocol CalculationAdapter do\n  def calculate(a, b)\nend\n\ndefmodule LegacySystemAdapter do\n  defimpl CalculationAdapter do\n    def calculate(a, b) do\n      LegacySystem.calculate(a, b)\n    end\n  end\nend\n\ndefmodule NewSystem do\n  def makeCalculation(calculation) do\n    IO.puts(\"New System: Calculating...\")\n    calculation.calculate(10, 20)\n    IO.puts(\"New System: Calculation done!\")\n  end\nend\n\ndefmodule AdapterExample do\n  def run() do\n    newSystem = NewSystem\n    legacySystem = LegacySystemAdapter\n\n    newSystem.makeCalculation(legacySystem)\n  end\nend\n\nAdapterExample.run()"
44,1,7,"\n# Abstraction\nclass Shape:\n    def __init__(self, drawing_api):\n        self.drawing_api = drawing_api\n\n    def draw(self):\n        pass\n\n# Concrete Abstraction\nclass CircleShape(Shape):\n    def __init__(self, x, y, radius, drawing_api):\n        super().__init__(drawing_api)\n        self.x = x\n        self.y = y\n        self.radius = radius\n\n    def draw(self):\n        self.drawing_api.draw_circle(self.x, self.y, self.radius)\n\n\n# Implementor\nclass DrawingAPI:\n    def draw_circle(self, x, y, radius):\n        pass\n\n# Concrete Implementor\nclass DrawingAPI1(DrawingAPI):\n    def draw_circle(self, x, y, radius):\n        print(f'DrawingAPI1.circle at {x}:{y} radius {radius}')\n\n\nclass DrawingAPI2(DrawingAPI):\n    def draw_circle(self, x, y, radius):\n        print(f'DrawingAPI2.circle at {x}:{y} radius {radius}')\n\n\n# Example usage\ncircle1 = CircleShape(1, 2, 3, DrawingAPI1())\ncircle1.draw()  # Output: DrawingAPI1.circle at 1:2 radius 3\n\ncircle2 = CircleShape(4, 5, 6, DrawingAPI2())\ncircle2.draw()  # Output: DrawingAPI2.circle at 4:5 radius 6\n"
61,5,20,"#include &lt;stdio.h&gt;\n#include &lt;stdbool.h&gt;\n\n// Context\ntypedef struct {\n    struct State* currentState;\n    int count;\n} Context;\n\n// State interface\ntypedef struct State {\n    void (*handle)(struct State* state, Context* context);\n} State;\n\n// Concrete states\nvoid stateA_handle(State* state, Context* context);\nvoid stateB_handle(State* state, Context* context);\nvoid stateC_handle(State* state, Context* context);\n\nState stateA = { stateA_handle };\nState stateB = { stateB_handle };\nState stateC = { stateC_handle };\n\n// State implementation\nvoid stateA_handle(State* state, Context* context) {\n    printf(\"Handle state A\\n\");\n    // Transition to state B\n    context->currentState = &stateB;\n    context->count++;\n}\n\nvoid stateB_handle(State* state, Context* context) {\n    printf(\"Handle state B\\n\");\n    // Transition to state C if count is even\n    if (context->count % 2 == 0) {\n        context->currentState = &stateC;\n    } else {\n        context->currentState = &stateA;\n    }\n    context->count++;\n}\n\nvoid stateC_handle(State* state, Context* context) {\n    printf(\"Handle state C\\n\");\n    // Transition to state B\n    context->currentState = &stateB;\n    context->count++;\n}\n\nint main() {\n    // Create context\n    Context context;\n    context.currentState = &stateA;\n    context.count = 0;\n\n    // Handle states\n    for (int i = 0; i < 5; i++) {\n        context"
69,5,8,"#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// Component\ntypedef struct Node\n{\n    int value;\n    struct Node *next;\n} Node;\n\nNode *createNode(int value)\n{\n    Node *node = (Node *)malloc(sizeof(Node));\n    node->value = value;\n    node->next = NULL;\n    return node;\n}\n\n// Composite\ntypedef struct LinkedList\n{\n    Node *head;\n} LinkedList;\n\nvoid add(LinkedList *list, int value)\n{\n    Node *node = createNode(value);\n    \n    if (list->head == NULL)\n    {\n        list->head = node;\n    }\n    else\n    {\n        Node *curr = list->head;\n        while (curr->next != NULL)\n        {\n            curr = curr->next;\n        }\n        curr->next = node;\n    }\n}\n\nvoid traverse(LinkedList *list)\n{\n    Node *curr = list->head;\n    while (curr != NULL)\n    {\n        printf(\"%d \", curr->value);\n        curr = curr->next;\n    }\n    printf(\"\\n\");\n}\n\nint main()\n{\n    LinkedList *list = (LinkedList *)malloc(sizeof(LinkedList));\n    list->head = NULL;\n\n    add(list, 1);\n    add(list, 2);\n    add(list, 3);\n\n    traverse(list);\n\n    return 0;\n}\n"
40,13,11,"module Flyweight where\n\nimport Data.Map (Map)\nimport qualified Data.Map as Map\n\n-- Flyweight Factory\ndata FlyweightFactory key value = FlyweightFactory\n    { flyweights :: Map key value\n    , createFlyweight :: key -> value\n    }\n\ngetFlyweight :: (Ord key) => FlyweightFactory key value -> key -> value\ngetFlyweight factory key = case Map.lookup key (flyweights factory) of\n    Just flyweight -> flyweight\n    Nothing -> let flyweight = createFlyweight factory key\n               in flyweight `seq` factory { flyweights = Map.insert key flyweight (flyweights factory) }\n\n-- Flyweight\ndata Flyweight = Flyweight\n    { name :: String\n    , age :: Int\n    }\n\ncreateFlyweight :: String -> Int -> Flyweight\ncreateFlyweight name age = Flyweight name age\n\n-- Example usage\nmain :: IO ()\nmain = do\n    let flyweightFactory = FlyweightFactory\n            { flyweights = Map.empty\n            , createFlyweight = createFlyweight\n            }\n\n    let flyweight1 = getFlyweight flyweightFactory \"flyweight1\"\n    let flyweight2 = getFlyweight flyweightFactory \"flyweight2\"\n\n    putStrLn $ \"Flyweight 1: name = \" ++ name flyweight1 ++ \", age = \" ++ show (age flyweight1)\n    putStrLn $ \"Flyweight 2: name = \" ++ name flyweight2 ++ \", age = \" ++ show (age flyweight2)\n"
65,11,13,"public abstract class Handler {\n    private Handler nextHandler;\n\n    public Handler(Handler nextHandler) {\n        this.nextHandler = nextHandler;\n    }\n\n    public void handleRequest(Request request) {\n        if (canHandle(request)) {\n            processRequest(request);\n        } else if (nextHandler != null) {\n            nextHandler.handleRequest(request);\n        } else {\n            System.out.println(\"Cannot handle the request.\");\n        }\n    }\n\n    protected abstract boolean canHandle(Request request);\n\n    protected abstract void processRequest(Request request);\n}\n\npublic class ConcreteHandler1 extends Handler {\n    public ConcreteHandler1(Handler nextHandler) {\n        super(nextHandler);\n    }\n\n    @Override\n    protected boolean canHandle(Request request) {\n        // Check if this handler can handle the request\n        return request.getType().equals(\"Type1\");\n    }\n\n    @Override\n    protected void processRequest(Request request) {\n        // Process the request\n        System.out.println(\"Concrete Handler 1 is handling the request: \" + request.getDescription());\n    }\n}\n\npublic class ConcreteHandler2 extends Handler {\n    public ConcreteHandler2(Handler nextHandler) {\n        super(nextHandler);\n    }\n\n    @Override\n    protected boolean canHandle(Request request) {\n        // Check if this handler can handle the request\n        return request.getType().equals(\"Type2\");\n    }\n\n    @Override\n    protected void processRequest(Request request) {\n        // Process the request\n        System.out.println(\"Concrete Handler 2 is handling the request: \" + request.getDescription());\n    }\n}\n\npublic class Request {\n    private String type;\n    private String description;\n\n    public Request(String type, String description) {\n        this.type = type;\n        this"
47,4,22,"class Context {\n    constructor(strategy) {\n        this.strategy = strategy;\n    }\n\n    setStrategy(strategy) {\n        this.strategy = strategy;\n    }\n\n    executeStrategy(a, b) {\n        return this.strategy.execute(a, b);\n    }\n}\n\nclass Strategy {\n    execute(a, b){\n        throw new Error(\"Strategy method must be implemented\");\n    }\n}\n\nclass AdditionStrategy extends Strategy {\n    execute(a, b){\n        return a + b;\n    }\n}\n\nclass SubtractionStrategy extends Strategy {\n    execute(a, b){\n        return a - b;\n    }\n}\n\nclass MultiplicationStrategy extends Strategy {\n    execute(a, b){\n        return a * b;\n    }\n}\n\n// Example usage\nconst context = new Context(new AdditionStrategy());\nconsole.log(context.executeStrategy(5, 3)); // Output: 8\n\ncontext.setStrategy(new SubtractionStrategy());\nconsole.log(context.executeStrategy(5, 3)); // Output: 2\n\ncontext.setStrategy(new MultiplicationStrategy());\nconsole.log(context.executeStrategy(5, 3)); // Output: 15"
86,8,14,"<?php\n\n// Receiver\nclass Light\n{\n    public function turnOn()\n    {\n        echo \"Light is turned on\\n\";\n    }\n\n    public function turnOff()\n    {\n        echo \"Light is turned off\\n\";\n    }\n}\n\n// Command interface\ninterface Command\n{\n    public function execute();\n}\n\n// Concrete command - TurnOnCommand\nclass TurnOnCommand implements Command\n{\n    private $light;\n\n    public function __construct(Light $light)\n    {\n        $this->light = $light;\n    }\n\n    public function execute()\n    {\n        $this->light->turnOn();\n    }\n}\n\n// Concrete command - TurnOffCommand\nclass TurnOffCommand implements Command\n{\n    private $light;\n\n    public function __construct(Light $light)\n    {\n        $this->light = $light;\n    }\n\n    public function execute()\n    {\n        $this->light->turnOff();\n    }\n}\n\n// Invoker\nclass RemoteController\n{\n    private $command;\n\n    public function setCommand(Command $command)\n    {\n        $this->command = $command;\n    }\n\n    public function pressButton()\n    {\n        $this->command->execute();\n    }\n}\n\n// Client\n$light = new Light();\n$turnOnCommand = new TurnOnCommand($light);\n$turnOffCommand = new TurnOffCommand($light);\n\n$remoteController = new RemoteController();\n\n$remoteController->setCommand($turnOnCommand);\n$remoteController->pressButton(); // Output: Light is turned on\n\n$remoteController->setCommand($turnOffCommand);\n$remoteController->pressButton(); // Output: Light is turned off\n\n?>"
60,7,21,"using System;\n\n// Abstract Class\npublic abstract class AbstractClass\n{\n    // Template Method\n    public void TemplateMethod()\n    {\n        Console.WriteLine(\"Executing Template Method\");\n\n        PrimitiveOperation1();\n        PrimitiveOperation2();\n    }\n\n    // Abstract Primitive Operation\n    protected abstract void PrimitiveOperation1();\n\n    // Abstract Primitive Operation\n    protected abstract void PrimitiveOperation2();\n}\n\n// Concrete Class A\npublic class ConcreteClassA : AbstractClass\n{\n    protected override void PrimitiveOperation1()\n    {\n        Console.WriteLine(\"ConcreteClassA: PrimitiveOperation1\");\n    }\n\n    protected override void PrimitiveOperation2()\n    {\n        Console.WriteLine(\"ConcreteClassA: PrimitiveOperation2\");\n    }\n}\n\n// Concrete Class B\npublic class ConcreteClassB : AbstractClass\n{\n    protected override void PrimitiveOperation1()\n    {\n        Console.WriteLine(\"ConcreteClassB: PrimitiveOperation1\");\n    }\n\n    protected override void PrimitiveOperation2()\n    {\n        Console.WriteLine(\"ConcreteClassB: PrimitiveOperation2\");\n    }\n}\n\nclass Client\n{\n    static void Main(string[] args)\n    {\n        AbstractClass classA = new ConcreteClassA();\n        classA.TemplateMethod();\n\n        AbstractClass classB = new ConcreteClassB();\n        classB.TemplateMethod();\n    }\n}"
48,8,4,"<?php\n\nclass UserPrototype\n{\n    private $username;\n    private $email;\n    private $password;\n    private $age;\n\n    public function __construct($username, $email, $password, $age)\n    {\n        $this->username = $username;\n        $this->email = $email;\n        $this->password = $password;\n        $this->age = $age;\n    }\n\n    public function getUsername()\n    {\n        return $this->username;\n    }\n\n    public function getEmail()\n    {\n        return $this->email;\n    }\n\n    public function getPassword()\n    {\n        return $this->password;\n    }\n\n    public function getAge()\n    {\n        return $this->age;\n    }\n\n    public function clone()\n    {\n        return new UserPrototype($this->username, $this->email, $this->password, $this->age);\n    }\n}\n\n// Example usage\n$userPrototype = new UserPrototype(\"johnsmith\", \"johnsmith@example.com\", \"password123\", 25);\n$user = $userPrototype->clone();\n\n?>"
28,16,5,"defmodule Singleton do\n  @instance nil\n \n  def instance do\n    case @instance do\n      nil ->\n        @instance = create_instance()\n      instance ->\n        instance\n    end\n  end\n \n  defp create_instance do\n    # Put your resource creation logic here\n    # For example, creating a new database connection\n    # or loading a configuration\n    IO.puts(\"Creating new instance\")\n    %{some: \"data\"}\n  end\nend\n \n# Example usage\ninstance1 = Singleton.instance()\ninstance2 = Singleton.instance()\n\nIO.inspect(instance1)\nIO.inspect(instance2)\nIO.puts(instance1 === instance2)  # Output: true"
47,2,20,"package main\n\nimport \"fmt\"\n\n// State interface\ntype State interface {\n\tdoAction(context *Context)\n}\n\n// Context\ntype Context struct {\n\tstate State\n}\n\nfunc (c *Context) setState(state State) {\n\tc.state = state\n}\n\nfunc (c *Context) getState() State {\n\treturn c.state\n}\n\n// Concrete state 1\ntype ConcreteState1 struct{}\n\nfunc (c *ConcreteState1) doAction(context *Context) {\n\tfmt.Println(\"State 1: Performing action\")\n\tcontext.setState(&ConcreteState2{})\n}\n\n// Concrete state 2\ntype ConcreteState2 struct{}\n\nfunc (c *ConcreteState2) doAction(context *Context) {\n\tfmt.Println(\"State 2: Performing action\")\n\tcontext.setState(&ConcreteState1{})\n}\n\nfunc main() {\n\tcontext := &Context{}\n\t\n\tstate1 := &ConcreteState1{}\n\tstate1.doAction(context)\n\t\n\tstate2 := &ConcreteState2{}\n\tstate2.doAction(context)\n}"
55,5,3,"#include <stdio.h>\n\n// Product interface\ntypedef struct Product {\n    void (*operation)(void);\n} Product;\n\n// Concrete product A\nvoid ProductA_operation() {\n    printf(\"Product A operation\\n\");\n}\n\nProduct* createProductA() {\n    Product* product = (Product*)malloc(sizeof(Product));\n    product->operation = ProductA_operation;\n    return product;\n}\n\n// Concrete product B\nvoid ProductB_operation() {\n    printf(\"Product B operation\\n\");\n}\n\nProduct* createProductB() {\n    Product* product = (Product*)malloc(sizeof(Product));\n    product->operation = ProductB_operation;\n    return product;\n}\n\n// Factory method\nProduct* createProduct(char type) {\n    switch (type) {\n        case 'A':\n            return createProductA();\n        case 'B':\n            return createProductB();\n        default:\n            return NULL;\n    }\n}\n\nint main() {\n    Product* productA = createProduct('A');\n    productA->operation();\n    \n    Product* productB = createProduct('B');\n    productB->operation();\n\n    free(productA);\n    free(productB);\n    \n    return 0;\n}"
32,11,21,"abstract class AbstractClass {\n    // Template method\n    public void templateMethod() {\n        commonStep1();\n        abstractStep();\n        commonStep2();\n    }\n    \n    private void commonStep1() {\n        System.out.println(\"This is common step 1\");\n    }\n    \n    protected abstract void abstractStep();\n    \n    private void commonStep2() {\n        System.out.println(\"This is common step 2\");\n    }\n}\n\nclass ConcreteClass extends AbstractClass {\n    @Override\n    protected void abstractStep() {\n        System.out.println(\"This is the concrete step implementation\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        AbstractClass abstractClass = new ConcreteClass();\n        abstractClass.templateMethod();\n    }\n}"
70,17,12,"type alias Request = String\ntype alias Response = String\n\ntype alias ProxyResponse = Response\n\ntype alias RealServerResponse = Response\n\ntype alias ProxyModel = Maybe ProxyResponse\n\ntype alias RealServerModel = Maybe RealServerResponse\n\ntype alias Model =\n    { proxyModel : ProxyModel\n    , realServerModel : RealServerModel\n    }\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n    case msg of\n        ProxyResponseReceived response ->\n            { model | proxyModel = Just response }\n        \n        RealServerResponseReceived response ->\n            { model | realServerModel = Just response }\n\n-- The proxy will forward the request to the real server\nforwardRequest : Request -> Msg -> Cmd Msg\nforwardRequest request responseReceivedMsg =\n    -- Simulating an HTTP request\n    Random.generate responseReceivedMsg (Http.get request (Http.stringDecoder identity))\n\n-- The proxy will receive the response from the real server\nreceiveResponseFromRealServer : RealServerResponse -> Msg\nreceiveResponseFromRealServer response =\n    ProxyResponseReceived response\n\n-- The real server will process the request and send the response back to the proxy\nprocessRequest : Request -> Msg -> Cmd Msg\nprocessRequest request responseReceivedMsg =\n    -- Simulating some processing logic\n    Random.generate responseReceivedMsg (Http.get request (Http.stringDecoder identity))\n\n-- The real server will receive the response from the proxy\nreceiveResponseFromProxy : ProxyResponse -> Msg\nreceiveResponseFromProxy response =\n    RealServerResponseReceived response\n\nmain =\n    -- Initialize the model\n    { model = { proxyModel = Nothing, realServerModel = Nothing }\n    , subscriptions = subscriptions\n    }\n\nsubscriptions : Model -> Sub Msg\nsubscriptions model =\n    Sub.none\n\n-- Sample usage\ninitialRequest : Request\ninitialRequest =\n    \"\"\n\ninit : ( Model, Cmd Msg )\ninit =\n    let\n        model =\n            { proxyModel = Nothing, realServerModel = Nothing }\n    in\n        ( model, forwardRequest initialRequest receiveResponseFromRealServer )\n"
59,1,18,"class Originator:\n    def __init__(self, state):\n        self._state = state\n\n    def set_state(self, state):\n        print(f\"Originator: Setting state to {state}\")\n        self._state = state\n\n    def save_state(self):\n        print(f\"Originator: Saving state {self._state}\")\n        return Memento(self._state)\n\n    def restore_state(self, memento):\n        self._state = memento.get_state()\n        print(f\"Originator: Restoring state to {self._state}\")\n\n    def get_state(self):\n        return self._state\n\n\nclass Memento:\n    def __init__(self, state):\n        self._state = state\n\n    def get_state(self):\n        return self._state\n\n\nclass Caretaker:\n    def __init__(self):\n        self._mementos = []\n\n    def add_memento(self, memento):\n        self._mementos.append(memento)\n\n    def get_memento(self, index):\n        return self._mementos[index]\n\n\n# Example usage\noriginator = Originator(\"State 1\")\nprint(f\"Initial state: {originator.get_state()}\")\n\ncaretaker = Caretaker()\nmemento1 = originator.save_state()\ncaretaker.add_memento(memento1)\n\noriginator.set_state(\"State 2\")\nprint(f\"Updated state: {originator.get_state()}\")\n\nmemento2 = originator.save_state()\ncaretaker.add_memento(memento2)\n\noriginator.set_state(\"State 3\")\nprint(f\"Updated state: {originator.get_state()}\")\n\nmemento_to_restore = caretaker.get_memento(1)\noriginator.restore_state(memento_to_restore)\nprint(f\"Restored state: {originator.get_state()}\")"
35,4,20,"class Context {\n    constructor() {\n        this.state = null;\n    }\n\n    setState(state) {\n        this.state = state;\n    }\n\n    getState() {\n        return this.state;\n    }\n}\n\nclass State {\n    constructor(name) {\n        this.name = name;\n    }\n\n    doAction(context) {\n        console.log(`State ${this.name} is doing action.`);\n        context.setState(this);\n    }\n}\n\n// Example usage\nconst context = new Context();\n\nconst stateA = new State('A');\nstateA.doAction(context);\nconsole.log(`Current state: ${context.getState().name}`);\n\nconst stateB = new State('B');\nstateB.doAction(context);\nconsole.log(`Current state: ${context.getState().name}`);"
18,5,5,"typedef struct {\n  // singleton instance\n  int value;\n} Singleton;\n\nstatic Singleton* instance = NULL;\n\nSingleton* SingletonGetInstance() {\n   if (instance == NULL) {\n      // allocate memory for the singleton instance\n      instance = (Singleton*) malloc(sizeof(Singleton));\n\n      // initialize the singleton instance\n      instance->value = 0;\n   }\n\n   return instance;\n}"
37,9,15,"interface Expression {\n    fun interpret(): Boolean\n}\n\nclass TerminalExpression(private val data: String) : Expression {\n    override fun interpret(): Boolean {\n        // Interpret the terminal expression\n        return data == \"true\"\n    }\n}\n\nclass OrExpression(private val expression1: Expression, private val expression2: Expression) : Expression {\n    override fun interpret(): Boolean {\n        // Interpret the OR expression\n        return expression1.interpret() || expression2.interpret()\n    }\n}\n\nclass AndExpression(private val expression1: Expression, private val expression2: Expression) : Expression {\n    override fun interpret(): Boolean {\n        // Interpret the AND expression\n        return expression1.interpret() && expression2.interpret()\n    }\n}\n\n// Example usage\nfun main() {\n    val expression1 = TerminalExpression(\"true\")\n    val expression2 = TerminalExpression(\"false\")\n    val expression3 = TerminalExpression(\"true\")\n    \n    val orExpression = OrExpression(expression1, AndExpression(expression2, expression3))\n    \n    val result = orExpression.interpret()\n    \n    println(result) // Output: true\n}"
59,12,7,"# Implementor\nclass Implementor\n  def operation_implementation\n    raise NotImplementedError, 'Implementor operation_implementation must be defined in subclass'\n  end\nend\n\n# Concrete Implementor A\nclass ConcreteImplementorA < Implementor\n  def operation_implementation\n    puts 'ConcreteImplementorA: operation_implementation'\n  end\nend\n\n# Concrete Implementor B\nclass ConcreteImplementorB < Implementor\n  def operation_implementation\n    puts 'ConcreteImplementorB: operation_implementation'\n  end\nend\n\n# Abstraction\nclass Abstraction\n  attr_accessor :implementor\n\n  def initialize(implementor)\n    @implementor = implementor\n  end\n\n  def operation\n    raise NotImplementedError, 'Abstraction operation must be defined in subclass'\n  end\nend\n\n# Refined Abstraction A\nclass RefinedAbstractionA < Abstraction\n  def operation\n    puts 'RefinedAbstractionA: operation'\n    @implementor.operation_implementation\n  end\nend\n\n# Refined Abstraction B\nclass RefinedAbstractionB < Abstraction\n  def operation\n    puts 'RefinedAbstractionB: operation'\n    @implementor.operation_implementation\n  end\nend\n\n# Example Usage\nimplementor_a = ConcreteImplementorA.new\nimplementor_b = ConcreteImplementorB.new\n\nrefined_abstraction_a = RefinedAbstractionA.new(implementor_a)\nrefined_abstraction_a.operation\n\nrefined_abstraction_b = RefinedAbstractionB.new(implementor_b)\nrefined_abstraction_b.operation"
71,12,14,"response: \n```\nclass Receiver\n  def do_something\n    puts \"Receiver: Executing do_something\"\n  end\n\n  def do_something_else\n    puts \"Receiver: Executing do_something_else\"\n  end\nend\n\n# Command interface\ninterface Command\n  def execute\nend\n\nclass ConcreteCommand1 implements Command\n  attr_accessor :receiver\n\n  def initialize(receiver)\n    @receiver = receiver\n  end\n\n  def execute\n    puts \"ConcreteCommand1: executing\"\n    @receiver.do_something\n  end\nend\n\nclass ConcreteCommand2 implements Command\n  attr_accessor :receiver\n\n  def initialize(receiver)\n    @receiver = receiver\n  end\n\n  def execute\n    puts \"ConcreteCommand2: executing\"\n    @receiver.do_something_else\n  end\nend\n\nclass Invoker\n  attr_accessor :commands\n\n  def initialize\n    @commands = []\n  end\n\n  def add_command(command)\n    @commands << command\n  end\n\n  def execute_commands\n    puts \"Invoker: executing all commands\"\n    @commands.each { |command| command.execute }\n  end\nend\n\n# Example usage\nreceiver = Receiver.new\ncommand1 = ConcreteCommand1.new(receiver)\ncommand2 = ConcreteCommand2.new(receiver)\n\ninvoker = Invoker.new\ninvoker.add_command(command1)\ninvoker.add_command(command2)\n\ninvoker.execute_commands\n```"
59,6,20,"#include <iostream>\n#include <string>\n\n// Forward declaration of State class\nclass State;\n\n// Context class\nclass Context {\nprivate:\n    State* currentState_;\n\npublic:\n    Context(State* initialState) : currentState_(initialState) {}\n\n    void setState(State* newState) {\n        currentState_ = newState;\n    }\n\n    void request() {\n        currentState_->handle(this);\n    }\n};\n\n// Abstract State class\nclass State {\npublic:\n    virtual void handle(Context* context) = 0;\n};\n\n// Concrete State classes\nclass ConcreteStateA : public State {\npublic:\n    void handle(Context* context) {\n        std::cout << \"Handling request in State A\" << std::endl;\n        // Perform state-specific actions and transition to next state if necessary\n        context->setState(new ConcreteStateB());\n    }\n};\n\nclass ConcreteStateB : public State {\npublic:\n    void handle(Context* context) {\n        std::cout << \"Handling request in State B\" << std::endl;\n        // Perform state-specific actions and transition to next state if necessary\n        context->setState(new ConcreteStateA());\n    }\n};\n\n// Client code\nint main() {\n    Context* context = new Context(new ConcreteStateA());\n\n    context->request();  // Output: Handling request in State A\n    context->request();  // Output: Handling request in State B\n    context->request();  // Output: Handling request in State A\n\n    delete context;\n    return 0;\n}"
55,8,12,"interface Image\n{\n    public function displayImage(): void;\n}\n\nclass RealImage implements Image\n{\n    private string $filename;\n\n    public function __construct(string $filename)\n    {\n        $this->filename = $filename;\n        $this->loadImage();\n    }\n\n    private function loadImage(): void\n    {\n        echo \"Loading image: \" . $this->filename . \"\\n\";\n        // Code to load and display image\n    }\n\n    public function displayImage(): void\n    {\n        echo \"Displaying image: \" . $this->filename . \"\\n\";\n        // Code to display image\n    }\n}\n\nclass ProxyImage implements Image\n{\n    private ?RealImage $realImage = null;\n    private string $filename;\n\n    public function __construct(string $filename)\n    {\n        $this->filename = $filename;\n    }\n\n    public function displayImage(): void\n    {\n        if ($this->realImage === null) {\n            $this->realImage = new RealImage($this->filename);\n        }\n        $this->realImage->displayImage();\n    }\n}\n\n// Client code\n$image = new ProxyImage(\"image.jpg\");\n// Image is not loaded here\n\n// Image will be loaded and displayed when calling the displayImage() method\n$image->displayImage();"
51,18,2,"struct User\n    username::String\n    email::String\n    password::String\n    age::Int\nend\n\nmutable struct UserBuilder\n    username::String\n    email::String\n    password::String\n    age::Int\nend\n\nfunction UserBuilder()\n    builder = UserBuilder(\"\", \"\", \"\", 0)\n    return builder\nend\n\nfunction username!(builder::UserBuilder, username::String)\n    builder.username = username\n    return builder\nend\n\nfunction email!(builder::UserBuilder, email::String)\n    builder.email = email\n    return builder\nend\n\nfunction password!(builder::UserBuilder, password::String)\n    builder.password = password\n    return builder\nend\n\nfunction age!(builder::UserBuilder, age::Int)\n    builder.age = age\n    return builder\nend\n\nfunction build(builder::UserBuilder)\n    user = User(builder.username, builder.email, builder.password, builder.age)\n    return user\nend\n\n# Example usage\nuser = UserBuilder()\n    |> username!(\"johnsmith\")\n    |> email!(\"johnsmith@example.com\")\n    |> password!(\"password123\")\n    |> age!(25)\n    |> build"
52,17,7,"module Main exposing (main)\n\ntype alias Color =\n    { r : Float\n    , g : Float\n    , b : Float\n    }\n\n\ntype alias Shape =\n    { color : Color\n    , draw : String\n    }\n\n\ntype alias Renderer =\n    { render : Shape -> String\n    }\n\n\nredRenderer : Renderer\nredRenderer =\n    { render = \\shape -> \"Drawing \" ++ shape.draw ++ \" in red\" }\n\n\nblueRenderer : Renderer\nblueRenderer =\n    { render = \\shape -> \"Drawing \" ++ shape.draw ++ \" in blue\" }\n\n\ncircle : Shape\ncircle =\n    { color = { r = 1.0, g = 0.0, b = 0.0 }\n    , draw = \"circle\"\n    }\n\n\nsquare : Shape\nsquare =\n    { color =  { r = 0.0, g = 0.0, b = 1.0 }\n    , draw = \"square\"\n    }\n\n\nmain : Html msg\nmain =\n    -- Example usage\n    div []\n        [ text (redRenderer.render circle)\n        , text (blueRenderer.render square)\n        ]\n"
47,6,12,"#include <iostream>\n#include <string>\n\n// Subject\nclass Database {\npublic:\n    virtual void query(std::string sql) = 0;\n};\n\n// RealSubject\nclass DatabaseImpl : public Database {\npublic:\n    void query(std::string sql) override {\n        std::cout << \"Executing query: \" << sql << std::endl;\n    }\n};\n\n// Proxy\nclass DatabaseProxy : public Database {\nprivate:\n    DatabaseImpl* database;\n\npublic:\n    void query(std::string sql) override {\n        if (database == nullptr) {\n            database = new DatabaseImpl();\n        }\n        \n        // Additional logic before executing the query\n        std::cout << \"Proxy: Before executing query\" << std::endl;\n\n        // Delegating the query execution to the RealSubject\n        database->query(sql);\n\n        // Additional logic after executing the query\n        std::cout << \"Proxy: After executing query\" << std::endl;\n    }\n};\n\n// Client\nint main() {\n    // Using the Proxy to execute a database query\n    DatabaseProxy proxy;\n    proxy.query(\"SELECT * FROM users\");\n\n    return 0;\n}"
59,10,8,"protocol Component {\n    var name: String { get set }\n    func operation()\n}\n\nclass Leaf: Component {\n    var name: String\n    \n    init(name: String) {\n        self.name = name\n    }\n    \n    func operation() {\n        print(\"Leaf: \\(name) operation\")\n    }\n}\n\nclass Composite: Component {\n    var name: String\n    var children: [Component]\n    \n    init(name: String) {\n        self.name = name\n        self.children = [Component]()\n    }\n    \n    func add(_ component: Component) {\n        children.append(component)\n    }\n    \n    func remove(_ component: Component) {\n        if let index = children.firstIndex(where: { $0 === component }) {\n            children.remove(at: index)\n        }\n    }\n    \n    func operation() {\n        print(\"Composite: \\(name) operation\")\n        for child in children {\n            child.operation()\n        }\n    }\n}\n\n// Example usage\nlet root = Composite(name: \"root\")\nlet child1 = Leaf(name: \"child1\")\nlet child2 = Leaf(name: \"child2\")\nroot.add(child1)\nroot.add(child2)\n\nlet child3 = Leaf(name: \"child3\")\n\nlet subComposite = Composite(name: \"subComposite\")\nsubComposite.add(child3)\n\nroot.add(subComposite)\n\nroot.operation()"
47,11,3,"public abstract class Product {\n    public abstract void doSomething();\n}\n\npublic class ConcreteProductA extends Product {\n    @Override\n    public void doSomething() {\n        System.out.println(\"ConcreteProductA: doSomething\");\n    }\n}\n\npublic class ConcreteProductB extends Product {\n    @Override\n    public void doSomething() {\n        System.out.println(\"ConcreteProductB: doSomething\");\n    }\n}\n\npublic abstract class Creator {\n    public abstract Product createProduct();\n    \n    public void operate() {\n        Product product = createProduct();\n        product.doSomething();\n    }\n}\n\npublic class ConcreteCreatorA extends Creator {\n    @Override\n    public Product createProduct() {\n        return new ConcreteProductA();\n    }\n}\n\npublic class ConcreteCreatorB extends Creator {\n    @Override\n    public Product createProduct() {\n        return new ConcreteProductB();\n    }\n}\n\n// Example usage\nCreator creatorA = new ConcreteCreatorA();\ncreatorA.operate();  // Output: ConcreteProductA: doSomething\n\nCreator creatorB = new ConcreteCreatorB();\ncreatorB.operate();  // Output: ConcreteProductB: doSomething"
58,4,18,"class Editor {\n    constructor() {\n        this.content = \"\";\n    }\n    \n    type(text) {\n        this.content += text;\n    }\n    \n    getContent() {\n        return this.content;\n    }\n    \n    save() {\n        return new EditorMemento(this.content);\n    }\n    \n    restore(memento) {\n        this.content = memento.getContent();\n    }\n}\n\nclass EditorMemento {\n    constructor(content) {\n        this.content = content;\n    }\n    \n    getContent() {\n        return this.content;\n    }\n}\n\nclass EditorHistory {\n    constructor() {\n        this.history = [];\n    }\n    \n    push(memento) {\n        this.history.push(memento);\n    }\n    \n    pop() {\n        return this.history.pop();\n    }\n}\n\n// Example usage\nconst editor = new Editor();\nconst history = new EditorHistory();\n\neditor.type(\"Hello\");\nhistory.push(editor.save());\n\neditor.type(\" World\");\nconsole.log(editor.getContent()); // Output: Hello World\n\neditor.restore(history.pop());\nconsole.log(editor.getContent()); // Output: Hello"
16,16,4,"defmodule Prototype do\n  defstruct [:name, :age, :email]\n\n  def prototype(name \\\\ \"\", age \\\\ 0, email \\\\ \"\") do\n    %Prototype{name: name, age: age, email: email}\n  end\n\n  def clone(%Prototype{} = prototype) do\n    %Prototype{prototype | name: prototype.name, age: prototype.age, email: prototype.email}\n  end\nend\n\n# Example usage\nprototype = Prototype.prototype(\"John Doe\", 30, \"john.doe@example.com\")\nclone = Prototype.clone(prototype)\nIO.inspect(clone)"
60,8,20,"\n<?php\n\n// State interface\ninterface State\n{\n    public function handle();\n}\n\n// Concrete states\nclass OpenState implements State\n{\n    public function handle()\n    {\n        echo \"File is opened.\";\n    }\n}\n\nclass ClosedState implements State\n{\n    public function handle()\n    {\n        echo \"File is closed.\";\n    }\n}\n\n// Context\nclass File\n{\n    private $state;\n\n    public function __construct(State $state)\n    {\n        $this->state = $state;\n    }\n\n    public function setState(State $state)\n    {\n        $this->state = $state;\n    }\n\n    public function open()\n    {\n        echo \"Opening the file.\" . PHP_EOL;\n        $this->state->handle();\n    }\n\n    public function close()\n    {\n        echo \"Closing the file.\" . PHP_EOL;\n        $this->state->handle();\n    }\n}\n\n// Example usage\n$file = new File(new ClosedState());\n\n$file->open();  // Output: Opening the file. File is opened.\n$file->close(); // Output: Closing the file. File is closed.\n"
58,12,2,"class User\n  attr_accessor :username, :email, :password, :age\n\n  def initialize(username:, email:, password:, age:)\n    @username = username\n    @email = email\n    @password = password\n    @age = age\n  end\n\n  class Builder\n    attr_accessor :username, :email, :password, :age\n\n    def initialize\n      @username = ''\n      @email = ''\n      @password = ''\n      @age = 0\n    end\n\n    def with_username(username)\n      @username = username\n      self\n    end\n\n    def with_email(email)\n      @email = email\n      self\n    end\n\n    def with_password(password)\n      @password = password\n      self\n    end\n\n    def with_age(age)\n      @age = age\n      self\n    end\n\n    def build\n      User.new(\n        username: @username,\n        email: @email,\n        password: @password,\n        age: @age\n      )\n    end\n  end\nend\n\n# Example usage\nuser = User::Builder.new\n  .with_username(\"johnsmith\")\n  .with_email(\"johnsmith@example.com\")\n  .with_password(\"password123\")\n  .with_age(25)\n  .build"
56,7,11,"using System;\nusing System.Collections.Generic;\n\n// FlyweightFactory\npublic class FlyweightFactory\n{\n    private Dictionary<string, Flyweight> flyweights = new Dictionary<string, Flyweight>();\n\n    public Flyweight GetFlyweight(string key)\n    {\n        if (!flyweights.ContainsKey(key))\n        {\n            flyweights[key] = new ConcreteFlyweight(key);\n        }\n        return flyweights[key];\n    }\n}\n\n// Flyweight\npublic abstract class Flyweight\n{\n    public abstract void Operation(int extrinsicState);\n}\n\n// ConcreteFlyweight\npublic class ConcreteFlyweight : Flyweight\n{\n    private string intrinsicState;\n\n    public ConcreteFlyweight(string intrinsicState)\n    {\n        this.intrinsicState = intrinsicState;\n    }\n\n    public override void Operation(int extrinsicState)\n    {\n        Console.WriteLine($\"ConcreteFlyweight: Intrinsic State: {intrinsicState}, Extrinsic State: {extrinsicState}\");\n    }\n}\n\n// Client\nclass Client\n{\n    static void Main(string[] args)\n    {\n        FlyweightFactory factory = new FlyweightFactory();\n        Flyweight flyweight1 = factory.GetFlyweight(\"flyweight1\");\n        Flyweight flyweight2 = factory.GetFlyweight(\"flyweight1\");\n\n        flyweight1.Operation(1);\n        flyweight2.Operation(2);\n        \n        Console.WriteLine(flyweight1 == flyweight2);  // Output: True\n    }\n}\n"
33,9,11,"interface Flyweight {\n    fun operation(extrinsicState: Int)\n}\n\nclass ConcreteFlyweight(private val intrinsicState: String) : Flyweight {\n    override fun operation(extrinsicState: Int) {\n        println(\"ConcreteFlyweight: Intrinsic State: $intrinsicState, Extrinsic State: $extrinsicState\")\n    }\n}\n\nclass FlyweightFactory {\n    private val flyweights = mutableMapOf<String, Flyweight>()\n\n    fun getFlyweight(key: String): Flyweight {\n        if (!flyweights.containsKey(key)) {\n            flyweights[key] = ConcreteFlyweight(key)\n        }\n        return flyweights[key]!!\n    }\n}\n\n// Example usage\nval factory = FlyweightFactory()\n\nval flyweight1 = factory.getFlyweight(\"Key1\")\nflyweight1.operation(1)\n\nval flyweight2 = factory.getFlyweight(\"Key2\")\nflyweight2.operation(2)\n\nval flyweight3 = factory.getFlyweight(\"Key1\")\nflyweight3.operation(3)\n"
66,6,21,"#include &lt;iostream&gt;\n\n// Abstract Class\nclass AbstractClass {\npublic:\n    // Template method\n    void TemplateMethod() {\n        Step1();\n        Step2();\n        Step3();\n    }\n    \n    virtual void Step1() = 0;\n    virtual void Step2() = 0;\n    virtual void Step3() = 0;\n};\n\n// Concrete Class A\nclass ConcreteClassA : public AbstractClass {\npublic:\n    void Step1() override {\n        std::cout << \"ConcreteClassA: Step 1\" << std::endl;\n    }\n    \n    void Step2() override {\n        std::cout << \"ConcreteClassA: Step 2\" << std::endl;\n    }\n    \n    void Step3() override {\n        std::cout << \"ConcreteClassA: Step 3\" << std::endl;\n    }\n};\n\n// Concrete Class B\nclass ConcreteClassB : public AbstractClass {\npublic:\n    void Step1() override {\n        std::cout << \"ConcreteClassB: Step 1\" << std::endl;\n    }\n    \n    void Step2() override {\n        std::cout << \"ConcreteClassB: Step 2\" << std::endl;\n    }\n    \n    void Step3() override {\n        std::cout << \"ConcreteClassB: Step 3\" << std::endl;\n    }\n};\n\n// Client Code\nint main() {\n    AbstractClass* classA = new ConcreteClassA();\n    AbstractClass* classB = new ConcreteClassB();\n\n    // Calling template method for ConcreteClassA\n    classA->TemplateMethod();\n    std::cout << std::endl;\n\n    // Calling template method for ConcreteClassB\n    classB->TemplateMethod();\n    \n    delete classA;\n    delete classB;\n    \n    return 0;\n}"
25,10,4,"class Person {\n    var name: String\n    var age: Int\n    \n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n    \n    func clone() -> Person {\n        return Person(name: self.name, age: self.age)\n    }\n}\n\n// Example usage\nlet john = Person(name: \"John\", age: 25)\nlet johnCopy = john.clone()\n\nprint(john.name)        // Output: John\nprint(johnCopy.name)    // Output: John\n\njohnCopy.name = \"John Smith\"\n\nprint(john.name)        // Output: John\nprint(johnCopy.name)    // Output: John Smith"
48,14,22,"trait Strategy {\n    fn execute(&self);\n}\n\nstruct StrategyA;\n\nimpl Strategy for StrategyA {\n    fn execute(&self) {\n        println!(\"Executing Strategy A\");\n    }\n}\n\nstruct StrategyB;\n\nimpl Strategy for StrategyB {\n    fn execute(&self) {\n        println!(\"Executing Strategy B\");\n    }\n}\n\nstruct Context {\n    strategy: Box<dyn Strategy>,\n}\n\nimpl Context {\n    fn new(strategy: Box<dyn Strategy>) -> Self {\n        Context { strategy }\n    }\n\n    fn set_strategy(&mut self, strategy: Box<dyn Strategy>) {\n        self.strategy = strategy;\n    }\n\n    fn execute_strategy(&self) {\n        self.strategy.execute();\n    }\n}\n\nfn main() {\n    let strategy_a = Box::new(StrategyA);\n    let strategy_b = Box::new(StrategyB);\n\n    let mut context = Context::new(strategy_a);\n    context.execute_strategy();\n\n    context.set_strategy(strategy_b);\n    context.execute_strategy();\n}"
