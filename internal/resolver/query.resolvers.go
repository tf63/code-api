package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"

	"github.com/tf63/code-api/api"
)

// Languages is the resolver for the languages field.
func (r *queryResolver) Languages(ctx context.Context) ([]*api.Language, error) {
	// Languageを取得
	languages, err := r.Lgr.ReadLanguages()
	if err != nil {
		return nil, err
	}

	// repositoryの戻り値をレスポンスに変換
	languageDtos := []*api.Language{}
	for _, language := range languages {
		languageDto := NewLanguageDto(language)
		languageDtos = append(languageDtos, &languageDto)
	}

	return languageDtos, nil
}

// Frameworks is the resolver for the frameworks field.
func (r *queryResolver) Frameworks(ctx context.Context) ([]*api.Framework, error) {
	// Frameworkを取得
	frameworks, err := r.Fwr.ReadFrameworks()
	if err != nil {
		return nil, err
	}

	// repositoryの戻り値をレスポンスに変換
	frameworkDtos := []*api.Framework{}
	for _, framework := range frameworks {
		frameworkDto := NewFrameworkDto(framework)
		frameworkDtos = append(frameworkDtos, &frameworkDto)
	}

	return frameworkDtos, nil
}

// Algorithms is the resolver for the algorithms field.
func (r *queryResolver) Algorithms(ctx context.Context) ([]*api.Algorithm, error) {
	// Algorithmを取得
	algorithms, err := r.Arr.ReadAlgorithms()
	if err != nil {
		return nil, err
	}

	// repositoryの戻り値をレスポンスに変換
	algorithmDtos := []*api.Algorithm{}
	for _, algorithm := range algorithms {
		algorithmDto := NewAlgorithmDto(algorithm)
		algorithmDtos = append(algorithmDtos, &algorithmDto)
	}

	return algorithmDtos, nil
}

// Patterns is the resolver for the patterns field.
func (r *queryResolver) Patterns(ctx context.Context) ([]*api.Pattern, error) {
	// Patternを取得
	patterns, err := r.Ptr.ReadPatterns()
	if err != nil {
		return nil, err
	}

	// repositoryの戻り値をレスポンスに変換
	patternDtos := []*api.Pattern{}
	for _, pattern := range patterns {
		patternDto := NewPatternDto(pattern)
		patternDtos = append(patternDtos, &patternDto)
	}

	return patternDtos, nil
}

// ProgramCodes is the resolver for the programCodes field.
func (r *queryResolver) ProgramCodes(ctx context.Context, input api.FindProgramCode) ([]*api.ProgramCode, error) {

	// 入力をrepositoryへの入力に変換
	findProgramCode, err := NewFindProgramCodeFromDto(input)
	if err != nil {
		return nil, err
	}

	// ProgramCodeを取得
	programCodes, err := r.Pgcr.ReadProgramCode(*findProgramCode)
	if err != nil {
		return nil, err
	}

	// repositoryの戻り値をレスポンスに変換
	programCodeDtos := []*api.ProgramCode{}
	for _, programCode := range programCodes {
		programCodeDto := NewProgramCodeDto(programCode)
		programCodeDtos = append(programCodeDtos, &programCodeDto)
	}

	return programCodeDtos, nil
}

// PatternCodes is the resolver for the patternCodes field.
func (r *queryResolver) PatternCodes(ctx context.Context, input api.FindPatternCode) ([]*api.PatternCode, error) {

	// 入力をrepositoryへの入力に変換
	findPatternCode, err := NewFindPatternCodeFromDto(input)
	if err != nil {
		return nil, err
	}

	// PatternCodeを取得
	patternCodes, err := r.Ptcr.ReadPatternCode(*findPatternCode)
	if err != nil {
		return nil, err
	}

	// repositoryの戻り値をレスポンスに変換
	patternCodeDtos := []*api.PatternCode{}
	for _, patternCode := range patternCodes {
		patternCodeDto := NewPatternCodeDto(patternCode)
		patternCodeDtos = append(patternCodeDtos, &patternCodeDto)
	}

	return patternCodeDtos, nil
}

// AlgorithmCodes is the resolver for the algorithmCodes field.
func (r *queryResolver) AlgorithmCodes(ctx context.Context, input api.FindAlgorithmCode) ([]*api.AlgorithmCode, error) {

	// 入力をrepositoryへの入力に変換
	findAlgorithmCode, err := NewFindAlgorithmCodeFromDto(input)
	if err != nil {
		return nil, err
	}

	// AlgorithmCodeを取得
	algorithmCodes, err := r.Arcr.ReadAlgorithmCode(*findAlgorithmCode)
	if err != nil {
		return nil, err
	}

	// repositoryの戻り値をレスポンスに変換
	algorithmCodeDtos := []*api.AlgorithmCode{}
	for _, algorithmCode := range algorithmCodes {
		algorithmCodeDto := NewAlgorithmCodeDto(algorithmCode)
		algorithmCodeDtos = append(algorithmCodeDtos, &algorithmCodeDto)
	}

	return algorithmCodeDtos, nil
}

// Query returns api.QueryResolver implementation.
func (r *Resolver) Query() api.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
