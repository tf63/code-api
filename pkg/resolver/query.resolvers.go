package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"

	"github.com/tf63/code-api/api"
)

// Languages is the resolver for the languages field.
func (r *queryResolver) Languages(ctx context.Context) ([]*api.Language, error) {
	// Languageを取得
	languages, err := r.lgr.ReadLanguages()
	if err != nil {
		return nil, err
	}

	// repositoryの戻り値をレスポンスに変換
	languageDtos := []*api.Language{}
	for _, language := range languages {
		languageDto := NewLanguageDto(language)
		languageDtos = append(languageDtos, &languageDto)
	}

	return languageDtos, nil
}

// Frameworks is the resolver for the frameworks field.
func (r *queryResolver) Frameworks(ctx context.Context) ([]*api.Framework, error) {
	// Frameworkを取得
	frameworks, err := r.fwr.ReadFrameworks()
	if err != nil {
		return nil, err
	}

	// repositoryの戻り値をレスポンスに変換
	frameworkDtos := []*api.Framework{}
	for _, framework := range frameworks {
		frameworkDto := NewFrameworkDto(framework)
		frameworkDtos = append(frameworkDtos, &frameworkDto)
	}

	return frameworkDtos, nil
}

// Algorithms is the resolver for the algorithms field.
func (r *queryResolver) Algorithms(ctx context.Context) ([]*api.Algorithm, error) {
	// Algorithmを取得
	algorithms, err := r.arr.ReadAlgorithms()
	if err != nil {
		return nil, err
	}

	// repositoryの戻り値をレスポンスに変換
	algorithmDtos := []*api.Algorithm{}
	for _, algorithm := range algorithms {
		algorithmDto := NewAlgorithmDto(algorithm)
		algorithmDtos = append(algorithmDtos, &algorithmDto)
	}

	return algorithmDtos, nil
}

// Patterns is the resolver for the patterns field.
func (r *queryResolver) Patterns(ctx context.Context) ([]*api.Pattern, error) {
	// Patternを取得
	patterns, err := r.ptr.ReadPatterns()
	if err != nil {
		return nil, err
	}

	// repositoryの戻り値をレスポンスに変換
	patternDtos := []*api.Pattern{}
	for _, pattern := range patterns {
		patternDto := NewPatternDto(pattern)
		patternDtos = append(patternDtos, &patternDto)
	}

	return patternDtos, nil
}

// FrameworkCodes is the resolver for the frameworkCodes field.
func (r *queryResolver) FrameworkCodes(ctx context.Context, input api.FindFrameworkCode) ([]*api.FrameworkCode, error) {
	// 入力をrepositoryへの入力に変換
	findFrameworkCode, err := NewFindFrameworkCodeFromDto(input)
	if err != nil {
		return nil, err
	}

	// FrameworkCodeを取得
	frameworkCodes, err := r.fwcr.ReadFrameworkCode(*findFrameworkCode)
	if err != nil {
		return nil, err
	}

	// repositoryの戻り値をレスポンスに変換
	frameworkCodeDtos := []*api.FrameworkCode{}
	for _, frameworkCode := range frameworkCodes {
		frameworkCodeDto := NewFrameworkCodeDto(frameworkCode)
		frameworkCodeDtos = append(frameworkCodeDtos, &frameworkCodeDto)
	}

	return frameworkCodeDtos, nil
}

// PatternCodes is the resolver for the patternCodes field.
func (r *queryResolver) PatternCodes(ctx context.Context, input api.FindPatternCode) ([]*api.PatternCode, error) {
	// 入力をrepositoryへの入力に変換
	findPatternCode, err := NewFindPatternCodeFromDto(input)
	if err != nil {
		return nil, err
	}

	// PatternCodeを取得
	patternCodes, err := r.ptcr.ReadPatternCode(*findPatternCode)
	if err != nil {
		return nil, err
	}

	// repositoryの戻り値をレスポンスに変換
	patternCodeDtos := []*api.PatternCode{}
	for _, patternCode := range patternCodes {
		patternCodeDto := NewPatternCodeDto(patternCode)
		patternCodeDtos = append(patternCodeDtos, &patternCodeDto)
	}

	return patternCodeDtos, nil
}

// AlgorithmCodes is the resolver for the algorithmCodes field.
func (r *queryResolver) AlgorithmCodes(ctx context.Context, input api.FindAlgorithmCode) ([]*api.AlgorithmCode, error) {
	// 入力をrepositoryへの入力に変換
	findAlgorithmCode, err := NewFindAlgorithmCodeFromDto(input)
	if err != nil {
		return nil, err
	}

	// AlgorithmCodeを取得
	algorithmCodes, err := r.arcr.ReadAlgorithmCode(*findAlgorithmCode)
	if err != nil {
		return nil, err
	}

	// repositoryの戻り値をレスポンスに変換
	algorithmCodeDtos := []*api.AlgorithmCode{}
	for _, algorithmCode := range algorithmCodes {
		algorithmCodeDto := NewAlgorithmCodeDto(algorithmCode)
		algorithmCodeDtos = append(algorithmCodeDtos, &algorithmCodeDto)
	}

	return algorithmCodeDtos, nil
}

// LanguageCodes is the resolver for the languageCodes field.
func (r *queryResolver) LanguageCodes(ctx context.Context, input api.FindLanguageCode) ([]*api.LanguageCode, error) {
	// 入力をrepositoryへの入力に変換
	findLanguageCode, err := NewFindLanguageCodeFromDto(input)
	if err != nil {
		return nil, err
	}

	// LanguageCodeを取得
	languageCodes, err := r.lgcr.ReadLanguageCode(*findLanguageCode)
	if err != nil {
		return nil, err
	}

	// repositoryの戻り値をレスポンスに変換
	languageCodeDtos := []*api.LanguageCode{}
	for _, languageCode := range languageCodes {
		languageCodeDto := NewLanguageCodeDto(languageCode)
		languageCodeDtos = append(languageCodeDtos, &languageCodeDto)
	}

	return languageCodeDtos, nil
}

// Query returns api.QueryResolver implementation.
func (r *Resolver) Query() api.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
